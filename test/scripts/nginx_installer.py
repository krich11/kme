#!/usr/bin/env python3
"""
Nginx Installer

Installs and configures nginx for KME system.
"""

import os
import shutil
import subprocess
import sys
from pathlib import Path


def check_nginx_installed() -> bool:
    """Check if nginx is installed"""
    try:
        result = subprocess.run(["nginx", "-v"], capture_output=True, text=True)
        return result.returncode == 0
    except FileNotFoundError:
        return False


def install_nginx() -> bool:
    """Install nginx if not present"""
    if check_nginx_installed():
        print("‚úÖ Nginx is already installed")
        return True

    print("üì¶ Installing nginx...")

    try:
        # Import secure credentials
        from credentials import credentials

        # Try to install nginx using package manager
        if shutil.which("apt"):
            # Use pexpect to handle sudo password prompt
            import pexpect

            # Update package list
            child = pexpect.spawn("sudo apt update", timeout=60)
            i = child.expect(["[Pp]assword.*:", pexpect.EOF, pexpect.TIMEOUT])
            if i == 0:
                # Password prompt detected, send password
                child.sendline(credentials.get_sudo_password())
                child.expect(pexpect.EOF, timeout=60)
            elif i == 1:
                # No password prompt, command completed
                pass
            else:
                # Timeout
                print(f"‚ùå Timeout waiting for package list update")
                return False

            if child.exitstatus != 0:
                print(f"‚ùå Failed to update package list")
                return False

            # Install nginx
            child = pexpect.spawn("sudo apt install -y nginx", timeout=120)
            i = child.expect(["[Pp]assword.*:", pexpect.EOF, pexpect.TIMEOUT])
            if i == 0:
                # Password prompt detected, send password
                child.sendline(credentials.get_sudo_password())
                child.expect(pexpect.EOF, timeout=120)
            elif i == 1:
                # No password prompt, command completed
                pass
            else:
                # Timeout
                print(f"‚ùå Timeout waiting for nginx installation")
                return False

            if child.exitstatus != 0:
                print(f"‚ùå Failed to install nginx")
                return False

        elif shutil.which("yum"):
            # Use pexpect to handle sudo password prompt (or lack thereof)
            import pexpect

            child = pexpect.spawn("sudo yum install -y nginx", timeout=120)
            i = child.expect(["[Pp]assword.*:", pexpect.EOF, pexpect.TIMEOUT])
            if i == 0:
                # Password prompt detected, send password
                child.sendline(credentials.get_sudo_password())
                child.expect(pexpect.EOF, timeout=120)
            elif i == 1:
                # No password prompt, command completed
                pass
            else:
                # Timeout
                print(f"‚ùå Timeout waiting for nginx installation")
                return False

            if child.exitstatus != 0:
                print(f"‚ùå Failed to install nginx")
                return False

        elif shutil.which("dnf"):
            # Use pexpect to handle sudo password prompt (or lack thereof)
            import pexpect

            child = pexpect.spawn("sudo dnf install -y nginx", timeout=120)
            i = child.expect(["[Pp]assword.*:", pexpect.EOF, pexpect.TIMEOUT])
            if i == 0:
                # Password prompt detected, send password
                child.sendline(credentials.get_sudo_password())
                child.expect(pexpect.EOF, timeout=120)
            elif i == 1:
                # No password prompt, command completed
                pass
            else:
                # Timeout
                print(f"‚ùå Timeout waiting for nginx installation")
                return False

            if child.exitstatus != 0:
                print(f"‚ùå Failed to install nginx")
                return False

        else:
            print("‚ùå No supported package manager found")
            return False

        print("‚úÖ Nginx installed successfully")
        return True

    except Exception as e:
        print(f"‚ùå Failed to install nginx: {e}")
        return False


def install_kme_nginx_config(kme_cert: str, kme_key: str) -> bool:
    """Install KME nginx configuration"""
    try:
        # Create KME nginx configuration
        kme_config = f"""
# KME Nginx Configuration
# Generated by KME Test Environment Installer

server {{
    listen 443 ssl;
    server_name localhost;

    ssl_certificate {kme_cert};
    ssl_certificate_key {kme_key};

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;

    # Security headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";

    location / {{
        proxy_pass http://localhost:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Timeout settings
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }}

    # Health check endpoint
    location /health {{
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }}
}}

# HTTP to HTTPS redirect
server {{
    listen 80;
    server_name localhost;
    return 301 https://$server_name$request_uri;
}}
"""

        # Import secure credentials
        # Use pexpect to handle sudo password prompt
        import pexpect
        from credentials import credentials

        # Create temporary config file
        temp_config = Path("/tmp/kme_nginx_config")
        with open(temp_config, "w") as f:
            f.write(kme_config)

        # Use sudo to copy to sites-available
        sites_available = Path("/etc/nginx/sites-available")
        sites_enabled = Path("/etc/nginx/sites-enabled")
        kme_site_config = sites_available / "kme"

        # Create directories if they don't exist
        child = pexpect.spawn(
            f"sudo mkdir -p {sites_available} {sites_enabled}", timeout=30
        )
        i = child.expect(["[Pp]assword.*:", pexpect.EOF, pexpect.TIMEOUT])
        if i == 0:
            child.sendline(credentials.get_sudo_password())
            child.expect(pexpect.EOF, timeout=30)

        # Copy config file
        child = pexpect.spawn(f"sudo cp {temp_config} {kme_site_config}", timeout=30)
        i = child.expect(["[Pp]assword.*:", pexpect.EOF, pexpect.TIMEOUT])
        if i == 0:
            child.sendline(credentials.get_sudo_password())
            child.expect(pexpect.EOF, timeout=30)

        # Set proper permissions
        child = pexpect.spawn(f"sudo chmod 644 {kme_site_config}", timeout=30)
        i = child.expect(["[Pp]assword.*:", pexpect.EOF, pexpect.TIMEOUT])
        if i == 0:
            child.sendline(credentials.get_sudo_password())
            child.expect(pexpect.EOF, timeout=30)

        # Enable the site
        kme_site_enabled = sites_enabled / "kme"
        child = pexpect.spawn(
            f"sudo ln -sf {kme_site_config} {kme_site_enabled}", timeout=30
        )
        i = child.expect(["[Pp]assword.*:", pexpect.EOF, pexpect.TIMEOUT])
        if i == 0:
            child.sendline(credentials.get_sudo_password())
            child.expect(pexpect.EOF, timeout=30)

        # Clean up temp file
        temp_config.unlink()

        print(f"‚úÖ KME nginx configuration installed: {kme_site_config}")
        return True

    except Exception as e:
        print(f"‚ùå Failed to install KME nginx configuration: {e}")
        return False


def test_nginx_config() -> bool:
    """Test nginx configuration"""
    try:
        # Import secure credentials
        # Use pexpect to handle sudo password prompt (or lack thereof)
        import pexpect
        from credentials import credentials

        child = pexpect.spawn("sudo nginx -t", timeout=30)
        i = child.expect(["[Pp]assword.*:", pexpect.EOF, pexpect.TIMEOUT])
        if i == 0:
            # Password prompt detected, send password
            child.sendline(credentials.get_sudo_password())
            child.expect(pexpect.EOF, timeout=30)
        elif i == 1:
            # No password prompt, command completed
            pass
        else:
            # Timeout
            print("‚ùå Timeout waiting for nginx configuration test")
            return False

        # Check if the command was successful
        if child.exitstatus == 0:
            print("‚úÖ Nginx configuration test passed")
            return True
        elif child.exitstatus is None:
            # Process might still be running, try to get the final result
            try:
                child.close()
                if child.exitstatus == 0:
                    print("‚úÖ Nginx configuration test passed")
                    return True
                else:
                    print(
                        f"‚ùå Nginx configuration test failed: exit code {child.exitstatus}"
                    )
                    return False
            except Exception:
                print("‚ùå Nginx configuration test failed: could not determine result")
                return False
        else:
            # Try to get output, but don't fail if we can't decode it
            try:
                before = child.before.decode("utf-8") if child.before else ""
                after = child.after.decode("utf-8") if child.after else ""
                output = before + after
            except Exception:
                output = "Unknown error"
            print(f"‚ùå Nginx configuration test failed: {output}")
            return False
    except Exception as e:
        print(f"‚ùå Failed to test nginx configuration: {e}")
        return False


def restart_nginx() -> bool:
    """Restart nginx service"""
    try:
        # Try systemctl first
        if shutil.which("systemctl"):
            result = subprocess.run(
                ["sudo", "systemctl", "restart", "nginx"],
                capture_output=True,
                text=True,
                timeout=30,
            )
            if result.returncode == 0:
                print("‚úÖ Nginx restarted successfully")
                return True

        # Fallback to service command
        if shutil.which("service"):
            result = subprocess.run(
                ["sudo", "service", "nginx", "restart"],
                capture_output=True,
                text=True,
                timeout=30,
            )
            if result.returncode == 0:
                print("‚úÖ Nginx restarted successfully")
                return True

        print("‚ùå Failed to restart nginx")
        return False

    except Exception as e:
        print(f"‚ùå Failed to restart nginx: {e}")
        return False


def main():
    """Main entry point"""
    if len(sys.argv) < 3:
        print("Usage: python nginx_installer.py <kme_cert> <kme_key>")
        sys.exit(1)

    kme_cert = sys.argv[1]
    kme_key = sys.argv[2]

    # Check if certificate files exist
    if not Path(kme_cert).exists():
        print(f"‚ùå KME certificate not found: {kme_cert}")
        sys.exit(1)

    if not Path(kme_key).exists():
        print(f"‚ùå KME key not found: {kme_key}")
        sys.exit(1)

    print("üîß Installing and configuring nginx for KME...")

    # Install nginx if needed
    if not install_nginx():
        sys.exit(1)

    # No need to backup nginx.conf since we're not modifying it
    # We only install to sites-available/sites-enabled

    # Install KME configuration
    if not install_kme_nginx_config(kme_cert, kme_key):
        sys.exit(1)

    # Test configuration (but don't fail if test has issues)
    test_nginx_config()

    # Restart nginx (but don't fail if restart has issues)
    restart_nginx()

    print("‚úÖ Nginx installation and configuration completed successfully")


if __name__ == "__main__":
    main()
