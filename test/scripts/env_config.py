#!/usr/bin/env python3
"""
Environment Configuration Tool

Configures the .env file for KME system operation.
"""

import os
import secrets
import string
import sys
from pathlib import Path

from cryptography.fernet import Fernet


def generate_secure_key() -> str:
    """Generate a secure Fernet key"""
    return Fernet.generate_key().decode()


def generate_kme_id() -> str:
    """Generate a KME ID"""
    # Generate 16-character alphanumeric ID
    chars = string.ascii_uppercase + string.digits
    return "".join(secrets.choice(chars) for _ in range(16))


def get_user_input(prompt: str, default: str = None, required: bool = True) -> str:
    """Get user input with default value support"""
    if default:
        prompt = f"{prompt} (default: {default}): "
    else:
        prompt = f"{prompt}: "

    while True:
        value = input(prompt).strip()
        if value:
            return value
        elif default and not required:
            return default
        elif not required:
            return ""
        else:
            print("This field is required. Please enter a value.")


def configure_environment():
    """Configure the environment file"""
    env_file = Path(".env")

    print("üîß KME Environment Configuration")
    print("=" * 40)

    # Check if .env already exists
    if env_file.exists():
        print("‚ö†Ô∏è  .env file already exists.")
        overwrite = input("Do you want to overwrite it? (y/N): ").strip().lower()
        if overwrite != "y":
            print("Configuration cancelled.")
            return False

    # Database configuration
    print("\nüìä Database Configuration:")
    db_host = get_user_input("Database host", "localhost")
    db_port = get_user_input("Database port", "5432")
    db_name = get_user_input("Database name", "kme_db")
    db_user = get_user_input("Database user", "krich")

    # Import secure credentials
    from credentials import credentials

    db_password = get_user_input(
        "Database password", credentials.get_postgres_password()
    )

    # KME configuration
    print("\nüîë KME Configuration:")
    kme_id = get_user_input("KME ID", generate_kme_id())

    # Generate secure master key
    master_key = generate_secure_key()
    print(f"Generated secure master key: {master_key[:20]}...")

    # Server configuration
    print("\nüåê Server Configuration:")
    server_host = get_user_input("Server host", "0.0.0.0")
    server_port = get_user_input("Server port", "8000")

    # Logging configuration
    print("\nüìù Logging Configuration:")
    log_level = get_user_input("Log level", "INFO", required=False)

    # Security configuration
    print("\nüîí Security Configuration:")
    enable_debug = (
        get_user_input("Enable debug mode", "false", required=False).lower() == "true"
    )

    # Build environment content
    env_content = f"""# KME Environment Configuration
# Generated by KME Test Environment Installer

# Database Configuration
DATABASE_URL=postgresql+asyncpg://{db_user}:{db_password}@{db_host}:{db_port}/{db_name}
POSTGRES_HOST={db_host}
POSTGRES_PORT={db_port}
POSTGRES_DB={db_name}
POSTGRES_USER={db_user}
POSTGRES_PASSWORD={db_password}

# KME Configuration
KME_ID={kme_id}
KME_MASTER_KEY={master_key}

# Server Configuration
HOST={server_host}
PORT={server_port}

# Logging Configuration
LOG_LEVEL={log_level or 'INFO'}

# Security Configuration
DEBUG={str(enable_debug).lower()}

# Test Configuration
TESTING=false
"""

    # Write .env file
    try:
        with open(env_file, "w") as f:
            f.write(env_content)

        print(f"\n‚úÖ Environment configuration saved to: {env_file}")
        print("\nüìã Configuration Summary:")
        print(f"  Database: {db_user}@{db_host}:{db_port}/{db_name}")
        print(f"  KME ID: {kme_id}")
        print(f"  Server: {server_host}:{server_port}")
        print(f"  Log Level: {log_level or 'INFO'}")
        print(f"  Debug Mode: {enable_debug}")

        return True

    except Exception as e:
        print(f"‚ùå Failed to write .env file: {e}")
        return False


def validate_environment():
    """Validate the current environment configuration"""
    env_file = Path(".env")

    if not env_file.exists():
        print("‚ùå .env file not found")
        return False

    print("üîç Validating environment configuration...")

    # Load environment variables
    with open(env_file) as f:
        env_content = f.read()

    # Check for required variables
    required_vars = ["DATABASE_URL", "KME_ID", "KME_MASTER_KEY", "HOST", "PORT"]

    missing_vars = []
    for var in required_vars:
        if f"{var}=" not in env_content:
            missing_vars.append(var)

    if missing_vars:
        print(f"‚ùå Missing required environment variables: {', '.join(missing_vars)}")
        return False

    print("‚úÖ Environment configuration is valid")
    return True


def main():
    """Main entry point"""
    if len(sys.argv) < 2:
        print("Usage: python env_config.py [configure|validate]")
        sys.exit(1)

    command = sys.argv[1]

    if command == "configure":
        success = configure_environment()
    elif command == "validate":
        success = validate_environment()
    else:
        print("Unknown command. Use 'configure' or 'validate'")
        sys.exit(1)

    if success:
        sys.exit(0)
    else:
        sys.exit(1)


if __name__ == "__main__":
    main()
