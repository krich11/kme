#!/bin/bash
# Multi-SAE Test Package Self-Extractor
# ETSI QKD 014 V1.1.1 Multi-SAE Testing Package

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

print_header() {
    echo -e "${BLUE}================================${NC}"
    echo -e "${BLUE}  Multi-SAE Test Package${NC}"
    echo -e "${BLUE}  ETSI QKD 014 V1.1.1${NC}"
    echo -e "${BLUE}================================${NC}"
}

print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_header

# Check for password
if [[ $# -eq 0 ]]; then
    read -s -p "Enter package password: " PASSWORD
    echo
else
    PASSWORD="$1"
fi

# Embedded encrypted data
ENCRYPTED_DATA="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"

# Create extraction directory
EXTRACT_DIR="multi_sae_test_package"
mkdir -p "$EXTRACT_DIR"
cd "$EXTRACT_DIR"

print_status "Extracting package contents..."

# Decrypt and extract
if ! echo "$ENCRYPTED_DATA" | base64 -d |     openssl enc -aes-256-cbc -d -salt -pbkdf2         -pass "pass:$PASSWORD"         -out "package.tar.gz" 2>/dev/null; then
    print_error "Invalid password or corrupted package"
    rm -f "package.tar.gz"
    exit 1
fi

# Extract package contents
if ! tar -xzf package.tar.gz; then
    print_error "Failed to extract package contents"
    exit 1
fi

# Remove temporary archive
rm package.tar.gz

# Set proper permissions for .config directory and files
print_status "Setting file permissions..."
chmod 700 .config
chmod 600 .config/*.pem 2>/dev/null || true
chmod 644 .config/*.json 2>/dev/null || true
chmod 755 *.sh *.py 2>/dev/null || true

# Create virtual environment and install dependencies
print_status "Setting up Python virtual environment..."
if command -v python3 &> /dev/null; then
    python3 -m venv venv
    if [[ -f "requirements.txt" ]]; then
        print_status "Installing Python dependencies..."
        source venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt
        print_status "✅ Virtual environment created and dependencies installed"
    else
        print_warning "No requirements.txt found, skipping dependency installation"
    fi
else
    print_error "Python3 is required but not installed"
    exit 1
fi

print_status "Package extracted successfully!"
print_status "Directory: $EXTRACT_DIR"

echo ""
echo "Files installed:"
echo "Current directory:"
ls -la *.sh *.py *.md 2>/dev/null || echo "  (no files)"
echo ""
echo ".config directory:"
ls -la .config/

echo ""
echo "Next steps:"
echo "1. cd $EXTRACT_DIR"
echo "2. ./multi_sae_test.sh"
echo ""
echo "This will run the comprehensive multi-SAE test suite."
