#!/bin/bash
# Multi-SAE Test Package Self-Extractor
# ETSI QKD 014 V1.1.1 Multi-SAE Testing Package

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

print_header() {
    echo -e "${BLUE}================================${NC}"
    echo -e "${BLUE}  Multi-SAE Test Package${NC}"
    echo -e "${BLUE}  ETSI QKD 014 V1.1.1${NC}"
    echo -e "${BLUE}================================${NC}"
}

print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_header

# Check for password
if [[ $# -eq 0 ]]; then
    read -s -p "Enter package password: " PASSWORD
    echo
else
    PASSWORD="$1"
fi

# Embedded encrypted data
ENCRYPTED_DATA="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"

# Create extraction directory
EXTRACT_DIR="multi_sae_test_package"
mkdir -p "$EXTRACT_DIR"
cd "$EXTRACT_DIR"

print_status "Extracting package contents..."

# Decrypt and extract
if ! echo "$ENCRYPTED_DATA" | base64 -d |     openssl enc -aes-256-cbc -d -salt -pbkdf2         -pass "pass:$PASSWORD"         -out "package.tar.gz" 2>/dev/null; then
    print_error "Invalid password or corrupted package"
    rm -f "package.tar.gz"
    exit 1
fi

# Extract package contents
if ! tar -xzf package.tar.gz; then
    print_error "Failed to extract package contents"
    exit 1
fi

# Remove temporary archive
rm package.tar.gz

# Set proper permissions for .config directory and files
print_status "Setting file permissions..."
chmod 700 .config
chmod 600 .config/*.pem 2>/dev/null || true
chmod 644 .config/*.json 2>/dev/null || true
chmod 755 *.sh *.py 2>/dev/null || true

# Create virtual environment and install dependencies
print_status "Setting up Python virtual environment..."
if command -v python3 &> /dev/null; then
    python3 -m venv venv
    if [[ -f "requirements.txt" ]]; then
        print_status "Installing Python dependencies..."
        source venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt
        print_status "✅ Virtual environment created and dependencies installed"
    else
        print_warning "No requirements.txt found, skipping dependency installation"
    fi
else
    print_error "Python3 is required but not installed"
    exit 1
fi

print_status "Package extracted successfully!"
print_status "Directory: $EXTRACT_DIR"

echo ""
echo "Files installed:"
echo "Current directory:"
ls -la *.sh *.py *.md 2>/dev/null || echo "  (no files)"
echo ""
echo ".config directory:"
ls -la .config/

echo ""
echo "Next steps:"
echo "1. cd $EXTRACT_DIR"
echo "2. ./multi_sae_test.sh"
echo ""
echo "This will run the comprehensive multi-SAE test suite."
