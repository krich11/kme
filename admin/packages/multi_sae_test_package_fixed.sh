#!/bin/bash
# Multi-SAE Test Package Self-Extractor
# ETSI QKD 014 V1.1.1 Multi-SAE Testing Package

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

print_header() {
    echo -e "${BLUE}================================${NC}"
    echo -e "${BLUE}  Multi-SAE Test Package${NC}"
    echo -e "${BLUE}  ETSI QKD 014 V1.1.1${NC}"
    echo -e "${BLUE}================================${NC}"
}

print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_header

# Check for password
if [[ $# -eq 0 ]]; then
    read -s -p "Enter package password: " PASSWORD
    echo
else
    PASSWORD="$1"
fi

# Embedded encrypted data
ENCRYPTED_DATA="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"

# Create extraction directory
EXTRACT_DIR="multi_sae_test_package"
mkdir -p "$EXTRACT_DIR"
cd "$EXTRACT_DIR"

print_status "Extracting package contents..."

# Decrypt and extract
if ! echo "$ENCRYPTED_DATA" | base64 -d |     openssl enc -aes-256-cbc -d -salt -pbkdf2         -pass "pass:$PASSWORD"         -out "package.tar.gz" 2>/dev/null; then
    print_error "Invalid password or corrupted package"
    rm -f "package.tar.gz"
    exit 1
fi

# Extract package contents
if ! tar -xzf package.tar.gz; then
    print_error "Failed to extract package contents"
    exit 1
fi

# Remove temporary archive
rm package.tar.gz

# Set proper permissions for .config directory and files
print_status "Setting file permissions..."
chmod 700 .config
chmod 600 .config/*.pem 2>/dev/null || true
chmod 644 .config/*.json 2>/dev/null || true
chmod 755 *.sh *.py 2>/dev/null || true

# Create virtual environment and install dependencies
print_status "Setting up Python virtual environment..."
if command -v python3 &> /dev/null; then
    python3 -m venv venv
    if [[ -f "requirements.txt" ]]; then
        print_status "Installing Python dependencies..."
        source venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt
        print_status "✅ Virtual environment created and dependencies installed"
    else
        print_warning "No requirements.txt found, skipping dependency installation"
    fi
else
    print_error "Python3 is required but not installed"
    exit 1
fi

print_status "Package extracted successfully!"
print_status "Directory: $EXTRACT_DIR"

echo ""
echo "Files installed:"
echo "Current directory:"
ls -la *.sh *.py *.md 2>/dev/null || echo "  (no files)"
echo ""
echo ".config directory:"
ls -la .config/

echo ""
echo "Next steps:"
echo "1. cd $EXTRACT_DIR"
echo "2. ./multi_sae_test.sh"
echo ""
echo "This will run the comprehensive multi-SAE test suite."
