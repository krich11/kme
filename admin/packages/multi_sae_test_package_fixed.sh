#!/bin/bash
# Multi-SAE Test Package Self-Extractor
# ETSI QKD 014 V1.1.1 Multi-SAE Testing Package

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

print_header() {
    echo -e "${BLUE}================================${NC}"
    echo -e "${BLUE}  Multi-SAE Test Package${NC}"
    echo -e "${BLUE}  ETSI QKD 014 V1.1.1${NC}"
    echo -e "${BLUE}================================${NC}"
}

print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_header

# Check for password
if [[ $# -eq 0 ]]; then
    read -s -p "Enter package password: " PASSWORD
    echo
else
    PASSWORD="$1"
fi

# Embedded encrypted data
ENCRYPTED_DATA="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
I8XH7tYesBvSlEpL9KGcaQ=="

# Create extraction directory
EXTRACT_DIR="multi_sae_test_package"
mkdir -p "$EXTRACT_DIR"
cd "$EXTRACT_DIR"

print_status "Extracting package contents..."

# Decrypt and extract
if ! echo "$ENCRYPTED_DATA" | base64 -d |     openssl enc -aes-256-cbc -d -salt -pbkdf2         -pass "pass:$PASSWORD"         -out "package.tar.gz" 2>/dev/null; then
    print_error "Invalid password or corrupted package"
    rm -f "package.tar.gz"
    exit 1
fi

# Extract package contents
if ! tar -xzf package.tar.gz; then
    print_error "Failed to extract package contents"
    exit 1
fi

# Remove temporary archive
rm package.tar.gz

# Set proper permissions for .config directory and files
print_status "Setting file permissions..."
chmod 700 .config
chmod 600 .config/*.pem 2>/dev/null || true
chmod 644 .config/*.json 2>/dev/null || true
chmod 755 *.sh *.py 2>/dev/null || true

# Create virtual environment and install dependencies
print_status "Setting up Python virtual environment..."
if command -v python3 &> /dev/null; then
    python3 -m venv venv
    if [[ -f "requirements.txt" ]]; then
        print_status "Installing Python dependencies..."
        source venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt
        print_status "✅ Virtual environment created and dependencies installed"
    else
        print_warning "No requirements.txt found, skipping dependency installation"
    fi
else
    print_error "Python3 is required but not installed"
    exit 1
fi

print_status "Package extracted successfully!"
print_status "Directory: $EXTRACT_DIR"

echo ""
echo "Files installed:"
echo "Current directory:"
ls -la *.sh *.py *.md 2>/dev/null || echo "  (no files)"
echo ""
echo ".config directory:"
ls -la .config/

echo ""
echo "Next steps:"
echo "1. cd $EXTRACT_DIR"
echo "2. ./multi_sae_test.sh"
echo ""
echo "This will run the comprehensive multi-SAE test suite."
