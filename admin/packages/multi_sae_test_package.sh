#!/bin/bash
# Multi-SAE Test Package Self-Extractor
# ETSI QKD 014 V1.1.1 Multi-SAE Testing Package

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

print_header() {
    echo -e "${BLUE}================================${NC}"
    echo -e "${BLUE}  Multi-SAE Test Package${NC}"
    echo -e "${BLUE}  ETSI QKD 014 V1.1.1${NC}"
    echo -e "${BLUE}================================${NC}"
}

print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_header

# Check for password
if [[ $# -eq 0 ]]; then
    read -s -p "Enter package password: " PASSWORD
    echo
else
    PASSWORD="$1"
fi

# Embedded encrypted data
ENCRYPTED_DATA="U2FsdGVkX1+jvBWk41762vTYO6fdzJZmS5dh4Ktd9vLKWTe8LwZjCjycVg6Gr0RQ
u1buyrc4M6aNk2X5wEG50OscYi1u8hTwLLOnYPX/46y5sn3Cz7a6KtYmY2ywZPcI
xoihoOvyz8TBCu4oru5Ywzi8OPXHqzZ52oa6px3htjjyxZVgMjyMzbsNhxMBnCn5
ZUWIjcK9c1PO3A4Dm1t6Sc9oKCdPY6JfdaaM6+V6Mgz8T6wy7JNUkEZUVARJlkt1
dxvrvFQEOJNv5mvZuQbV5dcdbEXKH21fn8gNNaNSfQmzYhA8gzhaTMIlG6O9OahN
ml4YeHbCFxXOs3zkhyQyTAlqB9ZfdRSGwdc+pJHHNuRPXCrw40m01fTKmUsVp5kL
R88v3i9/KEOkmxFuMmZujFAdgxePypYrQ5q+ddXiWyB3n7UHSz99v/rDEWRcR3zA
x/6MnTAWIJI+8z3vlo5/iJCNWpir4Yj0RQslltfZMMdBQqHCAQq9YZdU/aKvIQce
wOayRx0SB0rOC5ZA3tFvsk9RDle9mewdrj03+tQ4K0pqefyTdNt6XsTvnlWLAUuS
iiRVVm+LeAobsj5mbsHtKQwXlj5sisjj3USWdAosdSLx9f0cgdt7fs2n6pwaaDPz
sBJa5maQzlh5WSQVCotdOKIdHwZp2zFk+ZNi/KauHA42Fl38Yh5xM68xowwIoDd2
dFh+4Xk3eqRJbeOBd7/Kruv7LOmW8WIQtVqUguL/xcHNBuJ5aEff+Bn5sEbganoy
og57nzFzyhXPR0wfeuokEBL8/UIdcSEuXPXb9rW6RerlDsjDMnSOmVFP9xyfeU+L
C2MdXP/9dANnltEnE6zlrhjk0bdGLJ7Ik7vr1CHUjclxhXftNb7u3Jr2VQFWZhM7
qpnF5ET4JlI5IstZZIhwIlrtXGuNcV6w07FMeaaPbJBlP3k4rxEVZIYafNZZ8QJZ
0IwVsxqVXzismBJturycdhk2ED9QJhcwSwfolPd95qCiXkIbFtmZJaEJSgX26cOU
0/MhU7uv2Bj0CEEAY0gipN0HVP72I+QRP/xxq3JguDBdNeqVzUmz55N3pECFIFpT
JB5Qk13Tj3XxQMjNIye/xwjlS7ILGP8C77iBmkwXtHFcuwAV2tZvFGiTei35HeH/
/l1HflqIoPbow9A1+APO5GVRkVE6j6dJkSuuaM9297Bo7GBOv9eH5UYBjEy8wxJG
T1p8OTp3Wb2erBHSiNrRkNzTPMt01GF9ySbcHF59Euxmdb70QvireTG3YwiH4Ezw
9em9O3v2ldFaGAY1mhcLig9nDpcAyH8n4TpdTE4pcy5RDz0F61qcIgkn3a8Ia/6N
X1Mz9mrpaWGVIYzZZww2JRo7I5zQ5T18ogC4TQRXTvdm8AdlH84wYTd5po2ex6me
ezUmJHZANPlbz0QfHrhCHJEErOoHz6QD9BRUhCLE7k2+QcDCgDOtq4MwebgNmtPL
TUJHVIWehY7/xrF/CAuJREK+r+5Sh8KENSco+4s0nfEYLw805IGbkv4AxSN36XVt
dQnxjfJo3I8QtLccDi7jNWsAJJWcN6w3jDPBGaNP0ckmlwVCQpz5MvuN6Uj0JVZ1
cS4U+Ur6PjP5cwn+1YMGCouDZvFwSKGW6P/uf2Ir6zxeM1pvVar/HXo5K558/5/b
+Vp7skMkY2JL66Z8A9uGifeSwgu8hN++S1a/25Dja5DcchPHaD3zrtlr/20yOf2n
Wt/km75dYgTX9bTDntjKxjmiJEDBPqncWyMyFFszwtpA3zLhvZjNFPb/Lsc1J/nW
rnX57jV83WMihlz1BOcga45cnTuQU64D1RQ1SUY2rFsZUBd+L+HeyQ7PIjaUc63v
5HmcbIMGDJpux+3ULZkwn3yEOxQF/IhDHJQ1/azRTuz0s9DE8T2X0scYeJzYrstT
2DJxge4ShodpEUQNx09rAJmUyGX3laMdVXtdF3shuu12J9L+itSgqnUpeuia7QEG
P1Fa9OSu+p6eaNTUpJ6r7EyT4qPhUW6touQcGHhxsqGNjoJVZc8tjAyEt/9zXWpD
vtVlpcL6NTZUB746csPxPUt5eRXj4Il0Aa8YFSDstskN81HuDx1QMB/sKPM7/37J
wNAOqwRHqwXK7VmfjuJUAbJJUI1t30nMzupcnNzG+nyFMlqpYd2WUrDDFgOON1cT
bPrZ2qDnMWZOLCXF8WjWvtMIDHRwOdrYJYTphb/AE1pbkMtemAnxRxCd6rksfsrT
Eo44IxkAStHouD79Rn6hwWbAAhk1qdMgniKNbnKah8WbEwN0XJT5HuCkUV2mT11J
ad6404dUZ8TkFxFp/jubwVebhz5oG+10R9QPcCTJ9C3PM2X4zNQW2Ko25kKg180d
4zRO0qMWs662i80TpYOmCZOpCGQNk/teK8mPhIzD2caWizZJJZI2GktBhoFW9MfI
1ABVs6b2pVaz7QcSKNx8C97kWyuumkLxLbcVBuyW/vgEpOfBL1NTVi27jdxzYy0Q
jDec+ejVnmfWsC60fnIDBmBuM76JAWCNhbnZrur8avYproIOHSD8GIxYsaSEr/Ne
5gWb/j8OnqNfJtFB2FB0WrNCt/dMmor3IC04xzqCZ0bRiw3pVfFnQJemMBUt+hLm
/ruVXqTR+TqQaDkBkuou5uOyPhVc6Uwgzk81+RIFYyMt9U/DoCQeg7v4atICqSGO
xAeviDyyJ+SNVjk+4QAm9m/R7/btCx1Sl2qyKyY/kd0FNgQLhjljirH35H8ySQGy
DqNDNAYXkeB3GqWUDpjTfd0nRvjwAkDHfV+1Wx1nalawMlcEe0XnVm5c7DeDjYbT
WjUUBnmVwOfJcbKXw7nMjK8QZHi8VsOV1BKrOZvCAG22OP24NkX9HihT79LGVYMN
VFykZHNPLRIPYTRjDX1OP0BxZA3zxIfp/ebZgSYPb8t+L84Zq8FnDwWYsTdE6+hP
Ar0Y0S97eUkZ3IHB0UGFxKA1tpiweMxfEITgBUPuH3h/8qG5RPODSHAiRnfjiWGM
KIN1Lb5V7Bisi9VoAj7c5zCkEMLsFMdo/nQ5/Il/EGVbsBL/JcN7YX50R6pG03Mt
37sp6Yuwi/xM67HWc/hqn63UkhgNcogtMFWE902I5N8C2gYvvLJI3LSZM0P9xm9r
4YrbS8Bjr12YXDWM3o9ZHASfN8C9nynzWLhYrAjb1SyXSurwrTIZuAWzfLcCSz6r
SG3oIxgA9oPQ0+rrSSZ2z9Ttn78Z9atNjFz0xbhgvAO2K5mFZ9gFBTOAKSRhdB6r
1BrtpC5nMtFoP4flkRUzyOrSGHyRFKcuaqcMcwN4m945fQ22hTJ9iWh2atkpQM7E
tesPkz8JvfR4oputYAtMvv7y2JX5YUAXongUZB8xnBIPqN+dTMIFye6NaujfOgGT
8WJJoASZUD/ujuspLKaXFHfrJ9OrRJOQ7yAqXYJo7pEWwa8KBR77lSc6CVDv+JHX
huPDLlDxmMmXLqra37dwPQxfQVaMEHR5AnHm5Kc008qUp67azHJVmQj1MGSURzXx
r55kxklXPNtJhzygTzDgT75+xDk7e4mwFdW5pLqpjoX7YooXCbdB6iWCixMi9e82
Sdno0dHPnXQeVsoGLhSvRnBF/ZU+WY9NU8EdzdwBJQg5nqDrLO3TYKhPiCqX1jXa
U2KGMC+IC1RT7Sa23V1TXgn3WqbjO8Ox/N2M4nkwAXC86+7b8rSmDzNfLH9MAXUJ
gE0Lp4uJOujyATt6zMqcYqhumbxT2axw1ZK7l4Wav5QOyxyj8ztpezYKP3z87f1K
h+n3BO+fCOWU37DSjnyuK9tWGUS7BE7Fnh/53pG4LkOEz29qGmnBJLQbeECafrxX
e0JRz5bKTR5AA2qI7zN/CGeHIjjzcHVeO+qM0741DoDoMr3X39ozXdmuU2AG4oNs
SAFLF5cAJY3mmNqHrHXYv7catbjQXxW3lndYgjKzoNCjbvOAebEiYVcfpGYWwyS/
h02D1LVbDK63r4ehASUG3uKc17Vn/RIIqFqBfJJPSAYcO8IW9OWSWjRzHRoxwSHV
zvfk/tQb3i5eENUgRHSnXDcExfjLhXGrlgSAu6IH79UHZ+J11cwrfPyViOAvMePO
ZcdifOHzcxFcX6NfH/lkliZxGDNTmZSbc7e0hb+ywp626EPWgfXFmhpL4kqFaFdy
yn4M4r3F3UGxNi5xPgoPCQvjJiIvgjqpbD6vNIQSREJ2WfqBAjVFva7lYQ7BC2S9
93WpydM9pwe/43N35Fid9bmvGWoTRqnnClgPa+P2Vtr5oOSDGOI6B5T2OvkHkXBo
ci0fsiorA9fVwAhtrv4k5nce8mrbBsE1oSVmKHFzUuYR7JOUo2R2awpeWsfu1qvY
ymA+256d/tzoEx/VclHyTC1P5zZ0nxqHwqUbCCRUHdn25gecYsTYUqFbGiZp3klL
TDl4DmJ1Uc4sFY6RuUWNB7GDkCzaq0i4SIVbnYKCYb/Oc5ojYyFMl5DJIGm577U0
oOCbRvrWP8dtn4GMAaULU9q8ZuNgOYWiBkSBhXiDLSI2FRRQ4VExJsLTCpXXu1IK
r8f/24ws64Uo9IITWPRcb4C7ufCUb8v45SQYwSeJLg1QqCxypjTJteRsnc+DrngA
U5kao91SbJycQRi4Nme1HfkMwSmEZJHkHljAQrC2T3ufswDDP6vbrQGf422i8tbj
V3D1CXH5KUcNATGI2iaidMNmL60oh+5BPhrs3fRgKkoSRpI5VLKwSWavrof+PM7v
W69BY5loI9hi/RWaMfF9l8l/kGl1mo4/bZD2c3HOWbMCPFZUAfUKcpBH1ZMKb/qs
Y14pIDbiNVDvjzQpu2bRQSnGrfrRUGGKa6CarVCSWbz918zBKUxdPH36Mw+MKc7w
EoC536GDgoP6Fxgw/LdY0XD/OfmiDWQCioewjS8d+2tglqBtyPUNY8rMIW2Lnq01
Mw9Td4PiJy1Ble8c0gqZ/i+ZoiFLO2dN+QQIS51aBm97jwecM1vK60Pc7MdHDn+8
Sbjy82ZnNCk3hlYPrf9I3sOJ/jTIQ4e4juN2jXlsvRuT4kiLhKuw4wTQD/NS4Yqg
62vJr7goTWA0ZakI7Xmssq08IAbQSnnr/pVmAMxlBONvxVa4CEKkf0Z6uO5NcU2o
CTb5IbtzweDwZg2eaMKrb6xaZ2qZCxky6F9lPUddQDgssVXdl+ZpGsSwd7sXteG5
7iCCALWf0QqpBs0qxu8KYJakRBqEMlzh0LT2RA8HNMoK8I00UgZ3Ya6r0N26zEEa
9B8hLc0nhWx345toMrD+YkZN045wvCLXcv1lTMQIPNbtnv9KLaTWpsjUR9CX6Krv
4G0oXayutGNjkFHDybU65wH+fp33RsZzW1WU3ziHVM0sjKzbmTnjZBVC4RuQnCF4
xstAklqDYd1g5Y5KbIkiXRW4gCKL/GwCW1wRS+cbPldG8F7TJjGkwWx0ud/bfBBe
O2LoEgxJpZqfFlo09rymSjKRwUQ7asVxR7c5fW4UdXLD3kySuQN+0ry26o2Zi5dO
G5o2Bo6/DJwSwvcfRK694h29aDmHn8R8Z8zHT1INCs8/Lu4FyrD7883DppkpNKH9
59SZt66Nh3sS4Wc/Qby800+z9AJjM83M12Zof+D/iEQI/tt7KjmoIoAwtAp6WQqR
jLQbl3AaHCGazGROUmXUVI3xjY2zYI6XMCF/Z2hSVSzPYBzy+siDi0asBY7HL2o4
OiDP8abeWm5U4xz0vr4Oy3u+POwl+OGRKzgtkYT9X90lrydAwe/43c3J7/LzDWdQ
FS+doMk8tPh9n3PVeaqpNOirXetAcqtfFNabP/uf3kgPtKiyx3ZvtYtGM7GKLx3M
USPEMQJEnnZlXz9KPQ30y5a2xgF5FpDS1p+m9bLeiHwclOVuzkfm3xGc5SyLW7BT
JWrtX+5+SY2zHBei9NI4utMaD5CZZlTzGyEeij8jRT3MaU84gjI/tXV5P5mNMths
kaN7PYveIuQ+VCo7U7gfryiwcMfbOu6gg3a/PgrJ+AvhmFETgfB2PHnHVs/DHZmV
CMoUYDfjZ7qF3XW6wSD8EGSd+h3JcBiNUr8x/7//IX+Naa6gnWGSceyxIgsQisXY
h5rX31IJcoCJ1vm2+fA2h4dzilH6KJ9uODXInIEe9X44RMA5ign2WcWbrV7Zzg3G
1h6g80sKDiNY/oOVJEeLd69viQm7OPvD9230bxZMr2s/RF2Igx4ub2WbCkf6vZQx
y5kcmYRPpTJ/xMnePbh+nqVI28SNJqV5akJ6ppfKR0swdx8OmT/hjOHW2VbuSPrv
EBZEuz/H0OVNLPkfH/XRMh7Tktn99rJSY/8XmuuE74cWrfVf9u6SHwSqaOQqX8Hp
pCMpAZAPu9BnDead42QAcitgX8xnWeOD1gdgns+//CYW63JfdtkE6TheNTo2KmFQ
HrCe0tt+pVhXzfqdiXLQbIcLjz0iJnZrUyYIsl3Zg5NRXdbqLKre2MeqjKESNZa2
KfIroucTB0XWcNrmzPny6t3KtFpRGoGdboLbGkg3WjGh3HJBHjHRizeDwA9rYSiF
QAnoXt8oQvbfBh8RScev45dIT/acQblgP0wFKEcB1lXEMlYGCQMvGvj+VqDJXwld
3umlcJJd3ARgdmPNwsJ9hPZCeIAqv9OMxZV3jkXxzv8NvG0saGQRHBEd0Nh9R8Ue
LJr9RWUzHaAPy4cMAvOCYYJsmKnVy8uxlZLmZJYwfnEHLNtBNCvyPsmM/+C7JW08
+yQqazwI4cmTXnz3QGGs4E0WQjhaw5xTPz1r+woSaNwCqRetrVfqkwB36YIdr9Ud
bcBtqBkkCgJO/rB0HCspfq+iIrN386V/L+2H20iFvdb6OBuVCUXjoFrsXPqkZ65h
3OGG7tvxUOsFnLn88Cuk395xOEanFG5UZvkebPIJfdxG7Vw/jPv/ZaisfWW3TzIt
3Y4LYQcIDAeWevY3Mfep4ZOz8/5QIbA6CmvPSplxWhMvkREHW597cbPnZ+eKOP1n
Oi3PGfw+q3aydTitsPzIgH9onpNonjtfSh1ZzIT2PAfNHlJmEs4pwHCtPwhZDYaX
lyqq6O9+Shg/01D13qnM1SgFDMfcM7534cN4vWkUL7OTX4/SBgeUEpOeyIT9ljjE
dmYpCAdegKdxYJCyy47DP4pX8XNjPCA7FM3VAYpds6ViZq4itmjbCRp8oia1wlHy
0TUVeqrS0S/X34p13hJqm9297mbl9HRux8JBDigncq+Xw4ZXjbAcpD9ODJq2X+kl
5j5JS95j1s2t5le7ERFYUvP2SSa7yn3qprYpoephsmcxIMq3NBLWZBBtb+SlGcuo
Xg20UoTo7vkPNtLKk9vjtVroLSWX1GCUI8soNT6aWCw7wRwd/8C13J5xRM98zGwJ
2Gt9zfIxnF6SQp3Wk0nLo9rSPFMr8pVlwzuwMlqCFi3pI/ZBHoJ3w/6VPTGfEFng
6hyYcjT9XI6EvCde1cv8f0hAeXKcvWp4NC4fg8mDFeYmjFBSPIlRv6p3+e/mmtOR
2z9HrYAyNepc7GKSis1SnPBD3LTv3nvJefKQti0vXGvRYnDOIHQlYRdcgUJvhRPq
2Gj9JgjfTABNTk2OchtU00kCJwIj/KpWIivDc05ibk0NEy4/pllz6SqCw/PUYD5M
qg+kcIj8Yq9i1U+gD8Xpp5sW+9XwycVKm4Tpj3v+pLDSR86i1GcLcMcIghDVfQzW
P7l1meHVpZ57YwNXVhMW4JSv7j91B16JhMSqOmvlykATPes6gy+ena0cdi+HaS2/
3QnL+5XkXeaJiqSPcz7h4AeNJ/mzncoUce5V81/B/rNbzOm4jwCuh8q97RMASiZb
8awdRxzrlWS1sQxQp4f7N+URlHVZJPv2Rig0WKsRauwLFq1X7blh8wa3ibta+kYg
Re+hS58e6tcV+RWACK53QzcXvh+2BvKWx+IGCTmrdBZ8YybHsi35qoasaoO9b7pC
Rk0wCnP5aax2lwRbD+w268d4Oc/zyJ079dhuzr8oOlDUrQ/cKWK2/8OTYaDxo9AZ
YWP0Jr6fOLsgAJtFp8L3x2Zh6HVf9Gj7me3mAA1ZEu4I/hAGW9svVtLlvIKSIPQ6
tebU+8vj+wjHxcZWNxrgIO7CzMsoWm0LgbBBsEDmwerHl9VtSxMog6X4gvqJgLiT
zY2JYnizInJR+XKLER4iTqDLhbrmG1ZjdP09UZofhKAb5QpKDZyLNiGyZCQ1DBrv
ciJF6eWxTDWHzKioO5AyoSUOfNqbgZVm0O0moCXene5a6TmH6WCyYjpTZEh5FyKp
T9hf6f4CsLOcl8MojRYaAfV3iGrbwCclPyfnreBIS0VVs44S7RtZwyno1HWNU7oa
2mjc7z5thrbIDF9F6qxoH1FhKkbuQAndy3bcnSzXeai6XgFfTCFNBtLUkqRg7Qxb
k9bRT00kXCItCFmfz95D0f5Ax6MFrMMavMQFUUX1Nhd9Su/syXc6qGCSbLKGVBm3
6q+bS509uwSKKuFYMX8COuHvfqH9n9wOClJvuDqxDDqtDIpqKU3/Go44svG8iTA/
f37vJ3+hqkUgYMZCNK9Q4bCY/cHJA0RHuGC4jEWK0UhH6x86OqEgXWWMyLmnkvnX
qhwczxKgowique4zagRawDiQXeyzV6QPCpDwOdjw3kdWkeiU7eZdlya4Rn7drYW/
DHNAI5ZLOmfbL1F0cvg+5+lYz1GJPsvVk7XAnPCk4+QruxiqK4DYIJYp293gH+gN
BgIBsvemK/inyLdtOeGxiCpIQ/KUrk3YBJdFmVia3Uvc/j8si8T59xRqvGw54/DW
TBPt3JiBUUNvvc2Ofwbxvg66ZmzU2qpK88wkTaoSNxC9zyMEza5eOcxAaNruAgd6
hrAASW1M8K74I7cb9jDf0lKTfhVQ5o4ydu8XPY2ADaQWI2ukzhR4NcvsYgfvN1im
FuhqCI4bZjMqzAp8VGcrvw49bk0NC3/q5bFhVTTad8UaMsrwqVxU+uF/1CuNCrRV
8cdy3JRPDHzC5vXUi3labvNOF6SwNm+A1tCDsvUC9tTmrUr7v7RMli4DyQHFwroX
ACTobD7tLzAVoQUlwNmT9gwOm9VkAsg3Yl+dultIqBPZU8d85ggwYkO+VdMYTv+y
ns0/Q7aBGAqRcUTEmr8clfcaEJ1FNkG3nO6kyq7yfJHFFaYmhi7xsKT/dM27lMLv
rSAls4rULBRny28nywsCSSdfSD9d4r5oyRidFkLtFx9eFLMQJC7QbreyNdqDWqbc
RTZfqDD1TmGmgxYgCN503DlLvDk5vdKjP/NolvvHdAxmj0Dkrfia9Q5STfVBrYh3
xaWpJuDRzShISVfZFQdwtQYvEcS+4s6sJVoxGU6bBouw5ycZK6YFN5kOLI0KhH9q
nxVRK9XfK3pngnfkEsYnw0zG1Wp6wQRO1nlE/6Xet8UPdgjvNHyvXR8WPh6i42Qp
H1hMBJShEdYUgBwlQy0vElxrcByGdaQbYf6d29iiFX3oEPXHWOf9twsTxH2YJvts
n3kf0Hwm9WFZSeQb+8Z9ug4IhpX+Rcn0o6Ve0yiLIciZPYndJ+dPoqKi63Dn/U9D
1A6K+5YvGceCOmSVXTjaLXCKsqyet8ulgHK7iIUSZFhkyGuDZmpGuB4xG9XavCfs
rYRqByaZApTn1xye3qIbGEzfV5d6wxdXFja/UZqSqxK+m9n92xm/rphgyBsrjKR1
pu6Xft/6N6pyeAS2OZQgYZxMNodneL/4YMS9mYD3T7EzLRgC4xgOWBqcmMdSH2RD
jxryR/2izF23NHlVuPWbgk0F85EV4yUQbYb8aQppeGg0PjjY9MC1qMKZLBua3kEF
Vn9pg8I/I0srBrKknksZkaUQZapEPZoPprmJQOFUpDxY79+RWjv94sicsntduHEe
68wK+U7GruLvdI7i9t6FwUnp4vTFv5yyalz9QuJhaYR3F9nHxlnO5NJsM/68Vpoe
GZ9VUMXG1tqf9GLBPuOjGYrRiLFzl4EWzAftfMPyyGpmoEh6YeuMciUST0RnE2+C
H3o63gXqVASfwhcNMCVdCPWFp8QDhTJM1W9UGhN2ZjbZR0nk7guz+6UjqkIgHHrA
8TnWK5lE7Y3q4j+x8gfvEFlcckPWA1vqGqui2bJ6layuiollJYTE5dRO3i5SDj1t
QLfeOHvTF6D7we6uSCJlXHrTTBXPeSnoGm+7iBLLSA/T+e1U5lLk7XyVQ0LKOTd3
NV6lzY7d8DvS7Hc6Yzkk6A0+7tIu5qo/zxloJo39OWW5jC4clf8aGeaZZd9Zyitm
VMilmpAvg4u09Isgh0p1BqduUNbn3qjIo2VJRSsXybLEEUUqWKsGMd0/8HtRPOHW
XplJrRhDswmLaeTC8LWPZOgp6N8DFby2wwUFkYR+Oq3NTOXYufVY7m9ruAj/3wrB
GR8wDGdtEAcQUTqdNBJXrGs2aggqbmqDFWuT2dOTbFAlZhlxs1KgcESNlhJmO/fI
EMUoZavrmOau0irPgcxhDOSdWo/q6EA+d1hj1ccD8iJ+6m2dLJpqpmWREgf4eiCE
FE94AZfkqJS0cIQmqVqHENxkjw9f671+WNziQvWs6YagZHvSJsHPuEjoKv0riZiY
xt0S0yhnhpWJbaBjTapC/lP28D04CuzCXZly5jGRqTju0enXAwNuDIVQ0l2KAgLg
ADKVQLA/3/dpa+eYspUc/HFY0+WZ8eAyr5zTvCPKlusBnAbP5N7FfQuq7Df5mai/
ZOgcxVNMF4pXqrJ3vrqEpEFEayQ1qUaDd1MXIE4kwpsNusQSIEqtrLY/6wwhbiMO
U3mmAtf6C/+wmGjtD8mYtVlk+QxX1Nx28l7+Xj2X/uCq0eGnDFyST+/PT2wQXAUa
ULv3jzuDJXDFn84+C68ONnsDqDbsdch4YEvSCAEiFXDsz0QbGRutkyRz2rC4OKLF
jxPRiXeWBY2TgBFWj+Eabg+gr/jU/1qn2hART6ZSuznlzMOZWLitJ4U9TyDPEgq1
uAYGUSsaDFpFBvrxI8lOJw8JDfTaqX8Cqd3HjCRdX1sFaMhcawVEoBOBIPPG7kqH
ETIlDqDXn3msZjyPiDmfrUHK6efF1hIiaDE4Ps9ZrgpTA/qIVuxpNoo+mQ6E4Wc/
STM20uJrbvTJ0tXxNzRXWScSGpKq5Tmbi+fYjUNWmiTBq8gidLabLngJlD1LEm/w
2S6VgIT1JGwMa0XeVzlRIFPUedajr0c8xVDbdDpOEvkzybHI4pEbBue8arYt10h3
A/LTLI/y++JR7t+XqPlz6W0p7vMpSFMxL/pUdxo3ZdGlikrnzW0r8z511Fj9Ff9G
tKjSAP+ukKrmCrWK2/nAkAriwmUjR2OtxaPoA4iQCCbwt+kMxqCyp4tTBNYoYdio
XqvncRz8wZcw+eMX7S22G5cJyc32j9/yAhNEVUVKdO96HogUC0FEj9fgAUSKDTLd
BmZUOBowNiwDGwev7gZhmr/Xb+8hQMgZN3nE+bGCcF5llSeu066Nn7c3XA/zTU9m
l8bMQe2NMW0mvYGj9VSS/Kc4a77yZ/rV1tlprSZhk4TVGmbnBihUV9MsbOslLLwj
Uf4lqtR/8RN3UHhxG73O/mjUmqzuUkEPJn2tl1hi2oq58E54w4Vp9XLkY1oyVfr0
/jsjZfXbpyeD06m9JhX3b3F3JZUWmgQBw8Pp0GR6g7HlTFKG5eql4zxATJHR+XZ0
Cp+8uu5pL1nHTV8uN9TmvQV1HaHLYy9ZyIGgDc3A98fKYHQlnfpWjA977yVoh0sQ
BeWwnzTKGM8F5oH3Ho7ufI7DOA7gCq7OD/LcwB/zwiaEGKS7I9F9x+hswsCqYakL
oxmFr5Tjrmt8MNZB9g+YQGyd8nYUA3xEScxv+ZvlSIkjuqTUKyHC7it6asBDpqgj
jySicKVR5enf+GolU8OniUkjYdhgu+mQj8qZsvATbLWEkdBbQzllQxQH+8zfuifZ
kOPxEdv1Q/q89JxKu/vRAk0saya649TfdH5lpCl7yXmCbHB24arp/CaQpCTdUyk6
O98JC71cpY/wrictEDzKktHLG54wUnl/6KnYPXnt+YN7VooKrXMguQFN58soXfyG
Rbnm+V4qXFr+97xYNT7JKqYUOJ5BTRJmyz1/0bON5wM/zqVvB4gk/XMcTAV2tYFl
h6etIEmSGY2AvuAs8TrMRa79ayitMELH4R9x5+DFdqgvc7N8OzpbWHKs/c1Jrxjd
b9HrqQID6LpotvLufyqnimooqrg0apSD9OcBf+Ki/BxDu3fkBai/uSWtfNgRJhvF
Zlpj3ck3jkZvy6JdTrTZYiUQXQN3amujly3L/FzyecfjyV69ndF2wGUYi+dchLdf
X3Vc/eaSRwr9Q2ryu2SVqPVEkQ9Vn3odv57j6ujQHjOacqYNP54UEOExDDB6vDyJ
FkXyKBgbXZpGnZDwdp58IRtscNdRPZPPaIA+z0rw9CjVHYtz/4zXMdZ4+g6U2xU9
UNL76vXStPUUcANqdYM13Rqoqg5/qtgGr/BdFoQ3yjGt9k36ESvL6hcJriyLHX54
Vr3Wk9tHAYTc96Ikw+YA0lhwoWHtUHkBq6Ps/DBGscKUPiHT1LhRtCML51TW+fhd
5F0PfLKXvzAxZ8GvHK7sLTiFaOXIuMh7BlGggZGFpBUCtVct/iyt47OXqN0h1S8a
QJLiO5bZqX3FDy2w2O8VZ4Er9D+MHikjQ7x3HXGF39jG7lTGwSlpJoHNeFuHcv41
h7wG8cSOKtMyNI+dZD/9WNqb1v6OpI62DdPWIuE4E0nslygIsh7bq06h1avOvbu/
r14/PC7gMVc9cWKiQSPjOBrVB388lZSgPBspbnIaqgpNfqqbOPdhbuWHeyad4zD8
Z5heBumhjls3LsMMq7UAM9pbL3l78E/If/tNszUAz8T97m/6G/p/8sI2IStM3wIS
NRg+ZLyJCI4x12EXOb7BdopdavM/IkFj+pWKCdweyu9c2/wwBsF1fZyzj2perhLj
dttXPFbunfjNmpYGQdc8e4T3rGB0GT8256MHppJ3NJCYvnYu1vLkB6e8Gar9fbPu
3alV50XVHJ/pCLjoQkE/n6No/blL4A8ueB4eLEpyeEWFejurKZ3BOaZjtXbAjTxH
XI0QWrqNBzJWUTrKlYLAldQVYKGzwpM/gwhKaygL89jXwjYO3YZ8+Mk2j6Y6YlU4
C9iV3nIcDRf6g5uqOKJNUnTziDO7qWc+fAT/H9K+AteCudV4lLILdLsJVNdFlgEv
59oSwX7QTVW0ZCe4RE35VDllUFdI6qjGYiwjFvVaQq934wbFwLqyEHWg+nwqb6LG
C3KWtaTQWZIjRFJjaL+xjfLlUgLFBrX5RnLR4l4I/nsG7ztZyLq+hl5nBw6ouzRV
tiIz+X0N1YvUFkMdoseKR8uPEAB+xFpojJ4Bon/pnHrHjSiNzuWtB8aEzYEhNdy/
qVi9UNAnXrkaW9tE2FTP9C5BIgm3sMZly6SJARhThKbi+Iup0SQaWteyjQhRFTqv
4jpoxpUTVoaYpJjZ9Gkzva8okMrZI/pUBjrO0CO7+odu+oLshegeNxocN0jhGe20
vlsrr29h1OFUJys7FvLxH2wPkxqef0snFV2H9zQTLdNTDtKQiqYCmpZu84W2tFva
6sfTuhIPL2FF/+tNCfc2i/ivLc9H7S+Ld/iWZNctGcZZ4/+g+gqLTjYliY73Sgl5
wSTBzoDG2WyzG09Hjs74HKJGZCz1jd7bAJ0rwDe1YmZx5RVH9Pwj7Rj2kgzqkG/l
/IpCI2dYrLTMMJl+sJojMObOJdroqBQOYmToEh3C2C77SY2cRzD5d2aMKGn3e1Z/
0LwR0eNL0+KE5KN1J5az1xMJ35pN3Kppg8gRPse4QcO8sQF3qJ3s1fapJb/qPlmb
0FlcNRN6+Hkyds9XFi5ZpLt/s1yNS/am3J88D61lFaJKh/q4115j3pDpYiycHZYA
0uKMNOLCxQdS0zZBO5Sq5A5YkSmYhv68ohW4kKNgQPjMQBxWz/TDhdsZj1+MLCMp
JZ3XfSh6EfEU7cFaqvcCy6Q/tc9QVJ8YfPs2Y63tT5ZZ1lDDTSJ+5yH4VIZZFBCL
uNklrOeXfCwDDrMou0FrSxInOMARKDiySegsn7zPdzIkSIQLAKT5TObWzvJaD7/x
rRIc3nneGeUOUEK2eybsx4P1AB+3V6gaZHliYAp9wOtQtWlH7/3lHd4fmAolYzap
PxEllj47zO1QN5XYe6PqEIK1kSzFIzxoP+UMxVTAdP8FyHR2k98p5J5IOoYuDMD4
VJKlkKMTZxrpbemimucgbamJCekDrWC4ZtEvoCuO4VDiowstQEV6vcTV6aNLkJk1
PArODIYUYWnU66O1C1gucdXR1WU+fvVc59ir+fVZJ6XxlUEJIndtk8FsZaihydcl
IdVipu8WXik2NI8dIXq0OvNXpVlZOtaSzCtBnFpXUP0buWpvGydETBWJTpVSdZ1i
3XoNETnzDmwEO6qVOqw5QHe2IxWesRT9K1FDqXUrI/xf/V8Z7TsiNbw2MFjPVGsG
+0SYoRqutlq979xvaiLWTKbMLBGKBmanFj3DhWj67I5J50DvQWgss145jdpGEtbR
NEgC3GfNzuxEemmINgdPztKFLs+yEIZvEm23WH73CzpQymi97uyVHs/Y4dSF5ufw
AHfUDHg31H2tgL3m301GVjCtGoNPAIM0iUoU0zM6MDZuzDdLZA2rM1wDCFfsvf/M
W6TIE7JJHcfGGQRXVdnryK61ksyVjfkNXEcNTPaO7xU1sY9VKCK1kiXiUff2qswe
Ayf7OOsMfHWa24/7wMh80p4MHO0GMYThfz1edpAUR0Hoi66ILPcJ19Pxioi8JO2N
0OZJeECt5JO8MHxlPC8K+aCCfC7CqHs7X6gG09BHraa+EmlbcAIYri6YY3QC0asu
Y99saMAUrgltPeRtW0UIxan70IthmTp/NyW3NWpbowV0fnLWq1SX8A/8aRVOQbjh
q52CXfpLimcivqLZX6Y4huHmKSGQQ4LbKO7zsXepByLUE0CaMMGxZG5Vyp4wcX0N
KHgN+EVfYLl8m83xARnV37WlGDI+tATGlubIxawSX/6/QwaEWaTMXwZf5ZPCSbVT
IAKyjaHDW7dqhAMJXLcAERAXBH6NJ9gBg/mE6ZlHwrxNHgeuYpMVPogbeDpZ2QeE
ecMJ7lhn9OBVTAG1mbZTUcmU4KteM2D4OkRsKqOoGsbbifJHAR+4k+L5tRDcUpJU
JyPY8BcJAMh89OtVJIj4bJ1osiCEZ/UEpHzCILN/qsHj0Q6QmA/y0GuD0hoivKqf
K6P6bF/IM3EJfC3qXjBwp8TLu8a8tmIHvP/gUcbSWiTf7alZ/XtRzX8hrzyQeBbc
siiUC1FigaLRdLCIrhlFNQ9D2cO+7fyRCEUrgXIhzP+ftcIrSzbGjNT8Zlike/Bc
nIr8gcUHhVFnFSkwkDBAdj9jhhQ9jl0bF/B0eizymXkQzXtr3FLUyvEDPMtkFca2
yhzjwKbbwsi3N1kDjn2frBlmEEfkjPogAxvDv4FUvnEFr68KAqo3Fa1VUVWshlo7
zWL6FskH9t63y4rkiQ1sufHu/QdWPUf+ZOVKum37l7BrS2jFY1j+cAN3ypt6iUOk
+lEAyclZOTjTskZgVjB4F2CpskSy5LUTqqd6ZvUv9Bd0B6GAhi4wXUr5FGGSkEmL
qJfZYrYWUeDxeo0BmiiHg5GMZpoPDxGBcW7u12LhOXeYUjN3apDbo4GhWVa9kVSY
9jAKRVt6WOsmfV/TxaoznW3oQq74GiueR5z5SuW8VgYSL6MfajDVQl8U1eCpUYVD"

# Create extraction directory
EXTRACT_DIR="multi_sae_test_package"
mkdir -p "$EXTRACT_DIR"
cd "$EXTRACT_DIR"

print_status "Extracting package contents..."

# Decrypt and extract
if ! echo "$ENCRYPTED_DATA" | base64 -d |     openssl enc -aes-256-cbc -d -salt -pbkdf2         -pass "pass:$PASSWORD"         -out "package.tar.gz" 2>/dev/null; then
    print_error "Invalid password or corrupted package"
    rm -f "package.tar.gz"
    exit 1
fi

# Extract package contents
if ! tar -xzf package.tar.gz; then
    print_error "Failed to extract package contents"
    exit 1
fi

# Remove temporary archive
rm package.tar.gz

# Set proper permissions for .config directory and files
print_status "Setting file permissions..."
chmod 700 .config
chmod 600 .config/*.pem 2>/dev/null || true
chmod 644 .config/*.json 2>/dev/null || true
chmod 755 *.sh *.py 2>/dev/null || true

# Create virtual environment and install dependencies
print_status "Setting up Python virtual environment..."
if command -v python3 &> /dev/null; then
    python3 -m venv venv
    if [[ -f "requirements.txt" ]]; then
        print_status "Installing Python dependencies..."
        source venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt
        print_status "✅ Virtual environment created and dependencies installed"
    else
        print_warning "No requirements.txt found, skipping dependency installation"
    fi
else
    print_error "Python3 is required but not installed"
    exit 1
fi

print_status "Package extracted successfully!"
print_status "Directory: $EXTRACT_DIR"

echo ""
echo "Files installed:"
echo "Current directory:"
ls -la *.sh *.py *.md 2>/dev/null || echo "  (no files)"
echo ""
echo ".config directory:"
ls -la .config/

echo ""
echo "Next steps:"
echo "1. cd $EXTRACT_DIR"
echo "2. ./multi_sae_test.sh"
echo ""
echo "This will run the comprehensive multi-SAE test suite."
