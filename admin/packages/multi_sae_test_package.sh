#!/bin/bash
# Multi-SAE Test Package Self-Extractor
# ETSI QKD 014 V1.1.1 Multi-SAE Testing Package

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

print_header() {
    echo -e "${BLUE}================================${NC}"
    echo -e "${BLUE}  Multi-SAE Test Package${NC}"
    echo -e "${BLUE}  ETSI QKD 014 V1.1.1${NC}"
    echo -e "${BLUE}================================${NC}"
}

print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_header

# Check for password
if [[ $# -eq 0 ]]; then
    read -s -p "Enter package password: " PASSWORD
    echo
else
    PASSWORD="$1"
fi

# Embedded encrypted data
ENCRYPTED_DATA="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"

# Create extraction directory
EXTRACT_DIR="multi_sae_test_package"
mkdir -p "$EXTRACT_DIR"
cd "$EXTRACT_DIR"

print_status "Extracting package contents..."

# Decrypt and extract
if ! echo "$ENCRYPTED_DATA" | base64 -d |     openssl enc -aes-256-cbc -d -salt -pbkdf2         -pass "pass:$PASSWORD"         -out "package.tar.gz" 2>/dev/null; then
    print_error "Invalid password or corrupted package"
    rm -f "package.tar.gz"
    exit 1
fi

# Extract package contents
if ! tar -xzf package.tar.gz; then
    print_error "Failed to extract package contents"
    exit 1
fi

# Remove temporary archive
rm package.tar.gz

# Set proper permissions for .config directory and files
print_status "Setting file permissions..."
chmod 700 .config
chmod 600 .config/*.pem 2>/dev/null || true
chmod 644 .config/*.json 2>/dev/null || true
chmod 755 *.sh *.py 2>/dev/null || true

# Create virtual environment and install dependencies
print_status "Setting up Python virtual environment..."
if command -v python3 &> /dev/null; then
    python3 -m venv venv
    if [[ -f "requirements.txt" ]]; then
        print_status "Installing Python dependencies..."
        source venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt
        print_status "✅ Virtual environment created and dependencies installed"
    else
        print_warning "No requirements.txt found, skipping dependency installation"
    fi
else
    print_error "Python3 is required but not installed"
    exit 1
fi

print_status "Package extracted successfully!"
print_status "Directory: $EXTRACT_DIR"

echo ""
echo "Files installed:"
echo "Current directory:"
ls -la *.sh *.py *.md 2>/dev/null || echo "  (no files)"
echo ""
echo ".config directory:"
ls -la .config/

echo ""
echo "Next steps:"
echo "1. cd $EXTRACT_DIR"
echo "2. ./multi_sae_test.sh"
echo ""
echo "This will run the comprehensive multi-SAE test suite."
