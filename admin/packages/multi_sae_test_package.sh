#!/bin/bash
# Multi-SAE Test Package Self-Extractor
# ETSI QKD 014 V1.1.1 Multi-SAE Testing Package

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

print_header() {
    echo -e "${BLUE}================================${NC}"
    echo -e "${BLUE}  Multi-SAE Test Package${NC}"
    echo -e "${BLUE}  ETSI QKD 014 V1.1.1${NC}"
    echo -e "${BLUE}================================${NC}"
}

print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_header

# Check for password
if [[ $# -eq 0 ]]; then
    read -s -p "Enter package password: " PASSWORD
    echo
else
    PASSWORD="$1"
fi

# Embedded encrypted data
ENCRYPTED_DATA="U2FsdGVkX1/xH6VWSPN/P8IP2ayTyKQ850SmCaWgrFo5zA3LIiQnXGjj31YJFhHj
8m0gt8Wd2HhQ2URXmZEamoTL6/qI5IM6qgvPotc5ZuFWLwkn5lc2ruU5dndMqT7X
IaERK1kOfblwTx0FA7cZyU/4WcAkCKODYwJMSgsBxFs0o4a4+E8y410Rq+UP7aZ1
ul2qQpePeGAUaPjVQl5C5JfdOKYa31SayK2xhKOQDW5F+pDb3bQMkOUqtZTV3RW7
jmUWDeqCH/IALLMxVvy0bxS0s4QU3lBGDXp/wZZvxjV/m8KN0QyJtXB/qyQmho9z
mcq78xKUw/C4z65lCbvyw/TSAA1UZHC1cJ1weacspEGTLxcRQThloRWNBNBzgVHw
T6gTVjBDJT2RqJWGGK8Vk/UiaNkqau0ZaUBw9qS6s9WOVmuqCY4dUymdo6VSP3/o
mnYOWpNQJTjBFySSzZQB/hyaByx4RjtxRlrBEQQAIzRha1MDDvfyu/9MAUxdqdHe
jXVgDxeEJLKks1sQWzDKs0Dh92z9OMgmxLctqsrYgrMgUton+gdJK6sXPPeKW1r9
864Yux0+ShSK/yQ/o/IKmPROUHq+SOesOM79tUA9cnqXS3VkAQ1hjlKpTRXDEbhM
CFD0o1qyHioeDD/KDz6ohMThDOkUnpgjzwbbLkH+IrftmDHjXBRARYk1phJgxOQl
be+kXHy7LujnHQfem6mW3lL723EeI0nMZtATw8WuMRdG6rDePX4TlE28d7Ee89DH
/QiPS3+7RgaIY1paM0/b3teqMwZdamvVw9gDDiHKPG+Oy1qCjxSzF1nQ+vGAib8D
6WqyUUKgX0GFwvwzYi0RZlWez2vSJ5r/YLPl4KcSS6Eg2avajuTJFr5CXtM9iiMy
Zx1ql2kg3v/b3TsfXGpLwvhpOaYu5kfKJ+LkXhPeleuMV2pq8mcKUTFAUBHoWaM4
PbGp0YBporhiL7IGPkvmL1l6/XzW6VVH2s6la9n4feV+PidRicniqcuZ4t99Ojnf
BzloWDGlpwK3VKOHSvIDPIZxPMiF0Q9TjaenFGWa3ior3TnIXfOoH5feclvPECcT
YPjSl2Ondwu1IX31I9OUjPll2uT45/vEMiketnIEZrCCbC7FKWBDTMfOGZpNR0xe
SUisWDjVUqifGSEjzS2sTRrC+qpaDubZ1BsoDAaAeJ9qVAEmVo0C46v6BJqDLbbM
B24rl6fJ7fRBKWK1c3ZMb7Mow8wucMDHXGp2sO+NX3OMnxJKIT4uD6fKSKqnSSJ1
/r6fan+aCLkX+UhyQpAicIYo5Zj/3uy4/rncGBFc/rbu+goNNQcnxa9pzAML9wwq
zv1nYwJckfIytIwbiamOJ8U/LwLJbmel21UFAoZeQaXPwcPznsbRB3mO0tm0GbYL
0NQfNVshLPgKiyH/0Mimwy/tOWDW+AD+Sef7T/T9nXnHUTtMNdzl/Jf1kPInZbQ5
mvInTXSzDT+kn7RLolStMCON/M2FfbJ0kJbAROKQdTHLQU0FIka9yOoikey+fnJN
MWIYAPMANk52d+djl4/HsHQrwlj1oxzMcu6RbeOCi4D58Jf3afBC/E2If46WRmRB
YPk/ySpJvonCt93nOOQtJ0ru6b5t8V7HwTnoMDoC47eR5O5PcTtwxMRM61Io2XeT
oLOb3MfIP2gAAzKq5HZqcQPL2DbFSU6tD8lLF0/x1kUW2O8nvSKtOCbTyjwePuBT
5AaMfOfLVn2v4i+5eYXve+ghrqoA6aCygKC63ZeULXcPendKh+166CszkgDRRzSI
snH4v2MNth6P6uRh/BOZLswgM2tajQGp5+XCLoj1qPD4AtAdHqM2wpWf0dXghHSB
TyVjdhvrxCbejzgQ6//D4wKjjbllA5MrZxEXSRMRRXTA9yeRR1JGqPwuAdaRujkh
00oLtXTXovOFj1A3iiywDGM4xrh3mTLvO0hCHhMZUjHi22VM0QfhTIZFg1dOtPJX
JbLvh+UdNx0FwQaWOenCk/uvW1v+PqE/HuPcp7tlzxG0a1lIKGSBJ/jOl8wRYDCw
MAHmneN4a/o6RK8NCX2FxmhnEbcu3k97h9PMdSV/NC4qjcOcOjZLaRaiZEhzsAQa
dGRuVMSbbNtmHvZwneztcjARN1g8nQOPIeyGIZFKaJMoWDTECq5/T0Liz0l/BLv2
jw8jjzSMN4wew2QWPubqxYEa3MVd21d9kpraLZUbpqc1FqwCoUIQ297YK3B/p3VB
ZsfAMXs+d/7GTZ4/fw5CtTfaUJLzMeHuGYxAbNKvrb/Mtp1Y2l1XEY/Hg2ZPKEYM
3mSGitdJ+r6Tz0mwN99vBikN1omDytg2hwqk7f9FlB9lzgdwfXLI04He2RUL/psm
fSkN6tyCPrORC9rTOWpj3wtX7n94c5Mk1BL+I8ZnLUNPB8+Wz/8m8lts9WA6XgfB
ZRbOgEXs71xZZt3tv0/rlOlHgyeArA4imz/OQ9GQ+EMdA2nBHFhPXrj42j8iyi/r
dfGueUfiLkz0f3XRgVN8lXuawD8l6pRI67B3zMYts1Y6pSjcN98HZ7Nsr4X7HEQL
FidQlKtzib4O6Dh3fve1k2E8MnXJQtzskXVWnQ9A5qXE+uTdAtyUYvuUlejs5hNn
Zt4tcNmcNx4v8qM7TbTwKOd0VmewzGM3IIX4q4SRBz/a8dBtZm60vcgApepPDcDb
6DnWB+2ub+VM/FB+VYLfgIYhjxKCbo2erzcozDiyOVGSGYupOfZJyz3MzaMfmg+A
Sa1efJmIeHAD3KUOD0aVpNwCJmVqzRlzxWxTLBwxzsVKnePw8ZmnIFt425bxa+8l
ke61IYofNbb2vCeioVeuzc6zQNUgrho2AyiZ7kkN0mYcSeO2ZMb9ixPxz+d1hldw
v4bolWQdm8HAl7Jvoyl79y60lSO3IZ2Gh4mhpi1wJnEnxf0z9dy604itUa1RCJP6
TNqJTtNgXq0L4MPvLs9TZlbPejfRIj9t74I5esb+IYigGQ7hSVAHmAhmHwHDQp/n
LVWpPF4WwZ3wb4F94zunogPIdqVzANL/Rk9duqhgjUEzf7B6tZUo21t4hbpa+wDG
kYJNCNk2cTD3PttFzqaqyOb9/7FfMBCYDf0+KMcf0gjgQf1Rqf12H3JmKAGqbR5G
Kho5Ji82CjhERlh7UAis/OgJ0Z7YjzRSFSHFMYGdsdtomFY2fo4Nz+mkNU+EOF7Q
VE4XXBT8reoffPkkGZnvV1sO7nc9NLG81QnCcF4bR/+nM/amzk6BDjEsQMKf+f2Z
Jpn1lhAT9KeUK2V/6O/st0FI/zcR0eK+yc39jvFDUdWWnyjNS7GjtM3ro0Ilw2X6
kdV2CQk0lgHewR3PoTBPJEl/+MduW/Zu0xuPcoPMuewGIORO8yFwttU7+YCSdYRX
3J7T+uDNXhcVqjWZVygReH7K/t1XRSPzdpB+zg2UKM5RAZFOaFED+j4tid7e66YF
+G1ET0g1q1tJtAJvY7nJislo9MoH4SQGls2JWOu3VAmlvr1tyajBS6LLuF/SIq6X
+Yp3Fj14nE607K7ACVR24v1OM44hEpdaw70AxOIgClOAOJLfTF9TOTJvLmDxvwT7
j+OCDcRkp30ZVj+bmMl4ddecn4tGr6SVwNStxq2B7h3c8QMuK8ZRdAmlDqHPmQuR
keI5ZvpCAZIzDfdDtkm6rKz8vLBGGEPIBh3qDbJLHyHpQuw1k3faJWEuf9eDe/32
74HSeh4rjo3Y1UDFE8VqVSqhKrm2krVqOUHdt/RDs8c/XBS7FKFNPcV1zrrB4rhl
6h9m9Yo9JqSeAawVQ0OB5rzp7OF9K7N7YTUZth2QFPoDomsaynQu7L1OSd8/kgMi
F9HJcEeHIDrTdrjK2U7JBgub+QJrb0z/ma1HrpLEco4eqiXuBjhIGpZ9/rCOo5Yj
zgxb/0SGr4g4TZNPDD83Or7E34DVlgn7VDf/+gGLkQCOuN3oZjqYnrF4cXayLc68
6L731s3nP/T3mEXIEnIx1sh4sGjORWQcuaK40lvkOjBXA2CSTJpAmA8lc670Pzxj
llsa4AlTdCkW+To7ROuSf3+9972XYC1CQrPGb0WH9xGlhxrmf1jdk8kFLLGvxlV2
2dgB4pLfA3+LLvs77noXdm+2PXoe2WLMDMR++bc3oiaxHukKuGMa9KXDLApDk1I7
iDjPV5V8iG17V8VY6/Vx2bH5KsUp8q1jHscGDKN6CaCu6O+6S4alTtSGjYA6/z6L
ktgoM/odbFxNHOv7nPzsStNL3+Bs6rmjgHxnvWjSyxX2V5n/k4TxiwCA86xVfhEn
DWYiXXvo5+0ATV5VTZZdlIXTuNNTIaTESXTo2gy/8pSd0T0n6Af65wuDuq7CwrDM
iJcHf/mghHJWaKYJXc3yckicnymdxNciK3EONqfEvlkDiaiuS2Vzk0HEOlATgZU7
6qAe/qnR+aa70yg7DSMfcdp3TySAsfGSqEwA6OXGfkDvLgQ9c7BmygpLBvIC2pJ2
fXnf+oKwU4WsIj1Jzny4NFlS2c9wwB3tTi1Ee37fH0olfSvxuktUTQV4BNHbQCWT
nphGdtq2itdA8iJ0HcUGyc6IB5CeXn722fHJhEI9swiY3SyB5vm1nF1j+pR/u6gt
r/Pz025kAQVfrWFhhMRz09QNgiJ6v1iHVyNOFkoKyuEzF5R8v4p46zeO24lHf2L+
fwDC1LffG0A3i7Mc1GpAHW9zMaZiVYbleYzG/GIMpxxVr6Ra8zbTS8JxBjcr6jA+
+dgrBAt/Zmd+8ABC5MCQP2QSXxu8zzcP5uIqh8a2g2Ti8AiZPWtyvefnJOQmp3no
rKOvlbYBxsUQw9K3kb+PoaX8Xs3L2uQzKaiujJw1bgtWM7JVEg2O64CfCVeI14wi
pcXciM6SZSW/EWViLdzDeofq9UexaRmT1Rg6IOFnbpkq2r2vkwDzuo6aWzT198hf
3bdgu+t8eprcIY8Qcj8wczNrpkknkHKqp68qRufMg7WPy2fEgEfRHMXX9Yh2YFkz
+uc0zj9ej33AlyS0BeECkiV6vB6GdWadWiYVru/GwYMyLzpPtCtOC96eRezH3HZm
TV7gF6ASSZMYGUOOMqHqItiAvWDJs87ZqtzzF7Y+vSh1l+YzIVfABzIXJvgsH3EK
CgRpyrFf2Luie7ryuznl2HVx9FlEful7GDHu0oCrs6mmxUsD7FE1bRROax+Gz/SP
OiFEZmCl6yVheaXPa9l04FpA8o8IFqif4SslNBISlmB2LwhT5p7LSaeppqmYgTjY
/v573JOGTDbCgB2seOTjV3A/6h09VuQNRqTeXJGMUx7hXBU9dzi9n1oefmGjNyko
Nx1Sc3DCyfJ3llJzcCfWSimV99aMgMc5HWe7NVbBLktIH7I5HutYyKk9mn8xmLBQ
Php7eFQwFRb13k0tQ+/AicGHWjJTCrL9t+80awTCJ3Hut6JQ8B/t38bQci31HmUM
Ty3H4iPMcwFaxr5CrUDIAq7pegAcUkMPmISoF/WPVCe+XaDbl7KtACtVOfCySTOt
Or2zNgCHkKfCEfgKmgMrprj/Ep/kT0jzfTokr9UJhzIp1x6xKWkBj3CXsbn328be
wAodkn/dw1rM2swhoRQElo1UT+EjFf35DnZqd3w2mmVlZdkiYBmBmTBCg2DSMlb2
ecZUVhNo823PHEofNjGfHH/AyHyPhvxsXbqBRD4eQADHniiTrl0RvgCEdZuhVNuQ
tCZeNC4MeZn80YPYMEBU6UfGpFrdMETDQtUFzuFIDvcWPZ31OqlI1DYlL2SonVkW
otbCZeRsHmBcStS8106sP12vGvOozrrJZCJqfdirwqY17Pve3C9/Qc3hfS+tcnHj
0VkmZKwzJsMDZfffX4eyD7/qfHzNDBjrnvEYO8LGvuBTSfq5uePeptt/3DtUyJ2w
eLTGHEiEm2MPcy8QHwFmrou13NKrDRGcwIiYZZhCq0ZVDYSpDisZeanZP7dGMfxG
tjBxQDzAS+Tlp7DB2pf34imZn12twzIhYKFSRf6B4yAiC6iskFo7XIMKPTWKf5gg
wrEftrvok4IX/OI/e961RJ6W0h6vLIVBrOxa8ii2kcJCz+zw52VDh0Bx+q6G8/yv
TJndk0PMpPofcel1W1N3XL5+J8z5Uw1zw0Cw0tz2TAvwqhXAKbBW48bDJW3IstbN
3JV4mN1IGcnbLgeyM9Z1PTG/s3Dn+qYTu+OlRUAVdtjP34Gc6/CYhwP8slcNFsKH
IQ4FyhWaiYJbhj+FBIjl3idQKDuN+9qML4isLQiUM7K9sy71A2sYlaZfTbBQOPoT
Puzts0oieFLrzW65WzuDtDOdx7lm4HnpUdR4FjXnzd5+oFZ0Q77/FVH7nrdZ/LAJ
zPGNL7wXJXPht1vDas+xqgnyJTro/uvu+WIYIvQPGZewEjP6QkjP2XZt8Vc+VntK
DU0/InrTHd/uTEOGTMlzYJS2YVtuaNd5bg6Shur7DwCMUC2GxxNY6pGS47+gKVvm
4BWUGbyWgDxWbCmtNWrZdIlKvFkQocKRKAVF3yht6R4dEeano7QNobdseA9PGeZf
QU/zo/ycF2RxYH+itOjnsZLa4tYsCcY1mMO025JKhResA0GNp02FCeHtxLPepwus
YFYd6k9yBOwcQ03/S9q7RiKRqh1EtPVNEobBxrQrV6tDyRDUI3pi25lBdNKGNzUv
a2MEuwWsWRiczWuNTvT8WCwy8eBPpFiKqhIPIR2lUw8UMYy3JpNVVcxhBH7AssaQ
viqfASaRHHTQR6EoV8vZvAbA0e4KVahzTFcQWqLP0iuY/P1cuhYV4Jp2K37V9a18
isA8sWk5xL0vtuVtV4jhXcXR1pQBFeu4W5PFtVyjDm9Qd9xiEHMzDXFZfHOyTNl5
caS3gnOEZ973GouHKUNJkCbCNolNkkG6rTCRqcBMcF/oN7ANJKYXn7Nbxhrxulbd
lBg+SUWIeC1JKK9iqGhYyGblpLLVzw10rtWUXIOkcWtb1NWgsyji0h3p2vGxI/88
GrX+IQiux84sG/HQXVBvqh/P8PxeXNwlFhm6h+0NIrxTbWZv/wXHjfuHbr5wocY4
jW0vorM9NXgqfPq+3FdgXbegJQ/Y4ZH9fuVqXcJ/WsLidPDMeGEh7liYerB35y69
DT4gFoj1y4iLv3kLqrkR1Ie7UAU9MJopfSFy1dKuMD6Gpf/GLYNZ81t2Ye2N3/fi
IDKJfQbvrBvcwEtGgTX6O0dBv/4qgLaJI9SSzUt6g0+Gnb80DEUKy9bfuoFVB112
MIOdeKsiMWYfHlaTrgGNfJ8iQe6NryWE2pyCwIHosiucLvwSpIYqjdzd3dHmxBHa
3bIyepQVQmoot4SXjORAU5OhR4/fOdwcLRppooodZ+4hoMQjFJO4Y5nKQzWNo4Cn
JzEd28fWtL1TDRQq+C4F7nBbuzDMcSa02tifLRJNND01PWK6NE+KDyZqIg+FB99H
V96JjrCih8gzlITnaRi6CRh57kmGYXGqvsijJyvu2zzf9KMykF9KESOhvmYA7oqv
fJKphKxJ6L5xaV3+NN/T9wOVvv1KG4jbZ5R0x7atxGX8w7fX9O5syEXXk7NTOsPx
2De3FYKO5gJgBBgDU25Lo4Dah44FX1EM5e7I2b+mepBYRoNniNSvE/Y/ODPnrNxn
JhA5TtiXlcKVa7XKWth1+WAmyqXfrcvvYW7XapX89EF2cZAEmCUDobqkbzuy7sOr
C8wDfZ0bLRqHVfdfgdxNbIIONsUjeErvSZVoT/kpYntniMA2TVfQnhkls+ac5GtI
yRZm5Gi/sytWSPINq0b7nN24CZhD+EdJLj8YWU0TM7w/BGhs2FZLbVII0gchr7l6
PvdXjqHo2JD2rAz1iW1VEgLjsFyRQyz0rskMF4YMnLV9d612Y83iiIpivte8NqdG
0GFjOwElkFLivxZqtiMqA7bR41bt3DN/ISQYRJhBRnOl2429H8P+5lI3LqDqU0la
gA/W1TUnc3lTxSPko0fN1D58Ft5nGm8+icBNmci43iJTALwC4ihZV75h3pUZo/ps
WuUeifow/8nk/aO/i5ccTfDme+emUVum1asyLfL956oDEInIpFQ1mOB8xqzXVo/e
UeTCyANckaVIh8fZraWv9tYIvvINx2Q1abR9vxD54Caef+2z9YFz8Z36fKI1zJxR
A/tVjtRmqubIh1AaEv2d4VWV3v+/UUb/sil50wW0ClCwAmLPQU3vkXel5hw85qYm
UkGFVXUl/3U6uKTwfUARmZYLuGZAATWI+FMkSsLH+Q+4CEvi6mg7htfBSi/VeeAV
Eu1UED2uZacoB10QymkLULZvMXW5wk53qkzTBVgOlW8NOuOry75rNd48V1Akcgee
rcDlK58wCnulxoiwM1ahCnA/Ehp+bLOR7GO/dT9dxWEfFjsfDXgqt/sXPMTvbiV2
7ugCfOW9VB0Xn1K2F1xbESyfmyuXJDyADjEKtFjIIvm1/dgVftjkbPnr45pPkfxe
2ltmNTaw6ur1vgcYK3W2H7l7oNewKdITMk9lczUgkfSFaVZiF5uesWE86k0l0Ykp
aQt5sjwTyvRQOZEB1BxIDpMdVVuISWkMQm99MrFfi3d7+y4j0f0lUgxCyFWk23mq
LmzuoxdjtPNQyjTegatg5fZgYNa2t+oun5YGIhXK3/t2CQ0AASAaxTvOVNczFra4
eeLY/0QvLaktyWc9tAWyB97IkFyBR+25AB6eMYKMuff7A5a+yhzDJhz4K1Xd5TMv
9gROWscEeym7IQgbjdlRMjcR45kqKwMBVWb6thWoSm+kKKIWHJx+t0DAaZ/pvlh/
wwzWGEt3+EdVE9PN2A03Vsy16mXGv5lsY3M6fCfjspbbZcEEAth0jvazaJIAtpzD
wLwG3nX8cSs0WA8X0ltY442+DVRyhuiD+cQosLxXBk9ho36FOAco+jRx+WBGZ6fc
lE9zMe4Ixr//f3tEtuzHzcx31qMHMRwYG1OkwFzQb3OX6ObP436F4T2cbZ41mjj+
UrU+Cs1/cRaCWBlwS9IpKz+n6PS7tQYC6UktwBXCg19MLk7HMxMFdZqVYnpMcEim
zZI15zMjFKiAnLtowlpicZp0plcKOG2pslJkule4kkhj+UZEL3qW1P28iubH/d7a
qVLStttK+xB40WaC+f5wR2najBCewZBeSZQPsSTTAcvuLreMZn4ql4JsyIRRIhOZ
dvmnOAyxzKdwAWHGp1Tzya3AZIDjsqHXm37Ullk1RFtoXHiBogUkPgZjJjt33HB3
ZoLD9ebuDSvWs8sqNzJnaXJ9QV++gk15F0FUWZPhReK/OHlvg3X57cO0G7ECeRKZ
g33vZXwtZad6yxBNnlaAjbidU1pBZVKFj5kIwJ5MMFxpiOSsXw+U72CmLMQ4Kojm
7RHKfftU05VVrrsrRe3bOo1EpI3fCkYsS6RuQIfq4HW8pSD/TXX7tx9qECJxXm0N
Jv9Wfuq/QqMLO8tXK1ScjUyKqC9mHYoUrxrNNJ0kgwHolIBTWpsCQN2UAkFk/ORd
0N4jrS2wkui775ZyxjTkaI3XeGshSoe6dd6IUPsLlluJiHfxBM+8cjxObKfvd9Xp
QzSKYhWHhLhW6934w0MdPZMSRllvW9Ophf4GIklhPbQUd1UNKh6UXPUU7jpd0GHo
mpQ14KTji9TVA9UddyxMYfw79BWxk8cyyuexoLoAzcLuxoqOLW0zz4fT/fHq/HFt
Ia49iqkTKRzYhTE3JWiBIOwzXyzi2sYMPCKAoPTWLlh9HHuiK/OdQLZFdgc/u+Ue
puKCQnj5a8t4I7ZHzE646Do9cTH3VLR00+hc2z9jJv9GmzXP+LX3dqH0Ih85bX8W
zyRRpt1hKk7NNpJtIk2FBXPiztNAeWSrobHKnku40vncjefP5f1GeaccgPGmHHTA
LzHGKARjQg6IIfIBgZJZ7jDbwy1FUwICZWVxj5ez0SsxXRTBikhnFt49NEdreuyU
1KmZXWiUpLkNXQevxKuYJJURXpyeY5lkw0JCL76wkW/qhnh2tM0hfBp7yG3+tie4
KD1Zhap2JxoG1W49sSrK72j9zX8Ou743DWRcTA4kvWuUfL5QX6pV02iOclQ9IBzz
7SmtEPpcDKM7GMQ2vXXaXPRcN42WxZ5JuB5IspkU0jB5OvOSVOg9AdzNkAqV1onk
r6Q+R9OMmWOZREtx/kfa15l/buhYVfT+OvYJFhOzPuQGJboUT10KexGDzxc77zSB
JxUjcx4zihTenSvdabyztvLWW3TGkt0txd6lHjjtW/yhOQ5eTEnOiKiC0CKhwpbL
R/yYfZqTBXs54WjoTYWoExLFeO1FtCeB09aHJMtwPByO4bKEwl0FHuVfgCKtwrCx
/VtFhr3A1SsybmsRtTk8kwySYcs/Dg38WRQXRSnZ2UUOSDFrTr0aACYe1HmzhcPK
l8yLXCdeJ9rxkl+sXFUaM0hGus5VXrbmDzTsLGC3zTfs3WiyLONoI5bZ3kK0Bd36
/dKxhaOl+Pst4RUOfwQwVaa6y2+b+Jkrc5hXRmBShRzgZ7JTUO+T+PKuM/ibfN4q
K3eFlCMpwXqn6IwHNjYfqUhACYBFNcxmZFkquBC1dL5DRQHyEvl1nWp7XnfB4P1Z
bJOJYAa36JX2d0wMrqfeyVfclJikt2MY1ZLUJMgzUdy4YOSQFSJhngWY6HmjqSNH
SgJBgr4yTsd/5ZRJkQdTpwlR8/N/Bu13P1yPmwQTVc1KcA/5Bt4QADA/joFVGPG8
ZGABj+JiUPLr8EJkuPQTXuiomAl+sy/1g8d9xTj05wgWHFfibVKWBYttYmJrkcWP
gjmaPuYyJ577m9NED8cjLMD5vjVXwVUmn2QmMKF/KRnoTl1wOdD0Z1A6bF6MYuL6
/1Yw18/EZ7KCgRKBJtY3WinDR5N5eJ4dTL7iZmLoDEtBtToQDe3QsuSdJXrLsRJW
Q7ORObE0KcXWDZsQLBZNtRN+Td4US8XFuegLRBPsdubyHTNXpAEgrn7NVbpkhI+0
5xZGw5dlktENtKiRxJbk9YAf+T4Z1qRDQhBWW33t6/ckiYN30dopeD1ryOkAlFUv
11uZ+VmlyA7g1s0kLHTgM28vtv9SZy/EF3HEmzjAYa3kS7YfWr6i8XqmZSCqVubS
LRFIEbmFuC7PQOS0xML3Vd20R6Qp/50qydEm3c/V/O4CzL7kKnRSlH+qQMFg1dFM
TpUTcGe/DNiXI83qpIkznCblKhBzbVRrx4HI1QANJUcGv1oz162Aze2tle+F6R6H
cZExDhTDKXuHeHK5KFY1oklS6lQlSXmtTaHjc2opqH0qPLd8EVBrd3Ip3l0V9cgT
2IXrSHwKmJH068JzDMyFYvTgNT0TLBkx6H10Suy1ymdKB5K2lqpI7oyEXw9rLe3x
u7/33BPGTJX/JdgpraxSakfT6fgtHlKe06KWlyFaw44nneT7SptCjJ9A3ebaUsrL
9F52L5PxMtoq3cwFhXHcxwVMkIYAjIhxfhaKcgQBMAvETwFddAbsoN2p+pKDD5hn
aLTnNK2oXAXCEZGF6+acYvrjO1OrtoisqywADLFBmmOrlTQPjjdhhwYiEstHsTMF
I1KtS4A65U/eLYf0dGZhXWrx9pASeqIFbHJbmS6g73zO0VaqKgMxWoJ6i8psUqb2
ncUaILeyu0jsiXTZUn3oIkeMTrhXglAVIXd3Rd34r4MT9AimTwkCjeoG+ND1qpMD
sKlETGgKfn5Z4+Z5BgQHyT+yBkPh/NDj1hmIF+ijVreOUxcU8bRgbVzaPkeGDdjD
KXSM++549iKmv/+E9JvE6Cd51dYP/IWWf2STJ8EyKulW2Tm5sbRqraqJytFRiTVe
77cvUh8mrQOP5+9FM+a3UYOZApw6pyo3fNm5g0uIkCCBqZJSvakLC6n12YMHiT1f
QKYqfY4kM9a3u6aitJUAM60LpjBqbfmlmPPdBABseTDX8muDtEDvZMqjICvaVAan
KEr15nYknCWqzV3TqEyMBTYR7G2dek7K6q2gM4rmXTpxicziC1l4DCe9GZUrCcH9
ycTKiDLMMveNUbYXhQ2gY/p96O4wkkus7GMrE5otPJoIL7savwiyHuU1Ny5OoF/f
V4+dPF2ROrt/tzeeSUtLmLW2wHot1EHqJLBiO1rQ+XyOmtBs1iefq0MqI1Efj//z
WSNGcgG4Uxpnu4nAeUjgjid4Nzr0He4V+QeeDWnWAxFb0i+xMpmBice5nislaIPF
3ruGyAZY0wF3XJJWgyJRq4c7SrI6YwzqX6QBJS/aVS0L+g+NQtfLkCf8X+oaV5Or
8i7+Z8X3hV7/EdX4CU1p7Sud81z6jfvt0VN8tM4Bawb5qO/0HqyMmpc7wZ1rIUo7
2vP4B8XTAoN3J+lDTjOO+zfEgISwd/0AkgeTQJ3Dm9XjwGBCrokXqZIaCNZMQBYY
NMrT/JN8rSUBVrUhHutKS0dMo44W9X+++dse12eFAn8ndnYNzhIUQ23H5sZY9WFl
gujdmuiG6RcMjQSOjoGcb1EGxZswNO9f60tKaTmrxUyAp+SrYW+Nf7QcXaSJKNhT
Comd3CS21PGPw9UwdJP3dIqqsiAwGWWTJixmXQ+RdQE/EnF6gSQ3YFzHRvNp5qHL
TpgU5vn7hpsoS5RnaM8CRqvfRH/EPavA1d3RuPuxO2eK6Q7UJrnFx1qCmVhThv9t
uLK1gydLQElrJA2/lt86t9dja6ZPDXt4bh5JlFt37zDqZeQ/TDr2hnc9iHQaqES+
Q1bksp+J5zAkH+s8HQCTGce4CWcmzse2YsCCnTSMnWDWnlsG6addFaZGjzGp8x72
HK6Gp3nilxXnzB9+SuDR/zQn7Xg66BqhrU2KUZ/Jf7CGaiyk5FDTaCydtmQZA6e8
RRi6Vx8DRLtffZMNlvY3NbFZCqx6UQdHDNx+wOFnaC1w+u+DiRzUeS7AHd1QlhiF
9tMvLG7wblzGsCRO43/0OzEFya0/ZfzMLq2IPq/Uwtkr7DSbj4+CvhTqHC5/zsCf
FKtxOFMHxm3UF+DHHCe9bg5h6WwOZDPxrNaL82frmzCpzICO0nLMf9YrjR5tWGRM
52kiS0WLs+lz8JrSVOx8NzT92kEkdeArdx4iIHSY9fxHQS0P5N61c1CXtep72BZd
wXUsA7cyK97LSGGesUqWes+s79bN3Fl/01TIDyCH5UZeqWhUibAahZvHFyVXso7s
/lfLyhtxSUME7pCHCFrUvBVB8Rs0DRYIrosbOfFCDAMkFxZzgN/1tUMojFx6p5mk
FgbidLiQpKhJ36HXk1AUTiXM9rI5Kce89H4frL5etdO70o+cZWp1gznY0CDRtO0X
qT0oTUyqjP0bDeVVUvbHkRy1kck3IwKs2g8yfs2xqRoFTB6fc2mTOVo2D43JvnC9
707Wvx5tiOOc7yIMGa9agdAxAMAtfP4gLYQ1qdWYWEba7+bDxzdJRLMltHSKXDuo
pwe0UqvqvL+16OFnLFyZfpM8WZZVRM31CJ4jmSp5kRp2apwgR4oyAOiPKMsUbf9m
6i7J8cr8jNXzR7SWz4SKm34khzGd74VFlCGw9YhkBKtDhjIOIdGIdT/GJyO83h2q
LbchZWyjYvjXc5xeN044ITEpsVBsuxr1LUpjGWj2FC+Eia4cQo3YlNKVSAFLc5fi
Mue9XEwQm4tG4e2SiSqvR6BDbCg2aUJYLd6PhqNSnzBQFCoyMeUb8eURQB0BHqE8
AFBpThhZr9DZmldKyvHK+UBtvhGFK45xgsDptqfkxU451B2dzMakV6uO++x90DR8
R03wRwiupLm+CHqDT9vfoWw8sF3kL5e/iDfNxwxQXb8YofojJmi60vVQfqVBZ50C
SORVy4ZJBjJxNAV2wNlgPPDWZ00RO0frU8Ak5c++yTgFBi6oF+7y2KXVnc+wxpnb
7H4w5TY5XES3vBobA5nZsyYVgT0u7P17snv/bLO7UZBx43LAGBoiOt/+gHVyWkml
iORRPTaxFhHES3BKHRCGsLfpjiLNvbxGNCqBCoJ2ViAw5uayQshtmFGkCAVdjkqY
rvyEcyqktRE0erhXlgBpklDYLXlv4+877qBtVe7ssFO1uw6NOZd9bN1S+U809Tlq
ChRoNnpX8K6SnZPJKxR1TwK/DKCiMLUM1sfer6sPcg8as5gLZ29kQ/gciCBK167V
PeqgTiRtnw7qDpHcuEYUnBSFqqnkRAAhD6/uakPPwLOMZ9pH9Mb5dvpRUvn+NrRc
+eRHCwcVVvruJWr6t1ve/Z7WcDXLXgV89p0nas+PBkfzKMsH4DEeyeeS6Tw8vqa8
Ns3ch5SXvjRv6xcBfeyK17fIAI7wuQ72/bA/mhSz+uteaHPp706UcZ6nmJiusPqD
FsfexiUSo6Yby1zzG9KyOozX02akgUPKPNwcPIHlI8w4/bgj5TS7oz8UZrUXcNWh
kyh9EI0mcZ1Eaq+qjJeHJ3CuNaTErmlc/qVHTCuxhAZBDjU3iDfjT/tHrUI4BWvb
69VKQa+1hAdvG16MiqAIj4dEn1nHmi/9FCnl5QO+6HlRSYTkeyV61FRLmHzCw7jZ
F9R3sPvfDfgPrNcL6BS55eCJXF/Uws+SUEvlm9cv5plBKNnKzaUB93Vc6bB1SuhU
40Dbr3EcMFoPzxTgMq/3RdPVhM4OiBDfDq1EYrybE1qponHRjTfUcy1xdNGaLkMd
f0n7IfrNdEXFS/bcHEkq17YTMxgYa47HnlKax7GKnyiDyN8rqjq8InMTFVSebPge
aXWbhDNCPqFo56M//UyR19Nov8eT9Ir9cr8KIhWdDm/8q8rpjUFNZsqs3hMwYgVZ
IDqqcm/JNB4n0CyXxrSJKAO0SKyDacW0bH4kjjfBsjRrUICg43eb7QYLL4uIgydI
w1pT1Ymt9h+qmGhSPoTxkn9rdsL1Q3+zpNnWZZw5Y6HRg2w19Xn7jsmc9iNMDki3
aTSGLEfKn8wpcEt/kD4uD/klSEfE0z3V7+TGQmtdL1ILY8QQyW27BMnPvkooNz7v
btbP3RrONX0TbJduNIB5+Y3yYEhpRqAGESn55OuT9TqfHfdigIIChspLxuXMPAVd
czthWcOXo82IliCqxZNgC/OEDZsuRTvbdHwPXjRce11qIFHSwLe9aZsIOoJIW9dp
GgvFEbcnNsOFHvIjlb9+fR79y4qD7fTu1h0060tKiamvcxhGt/5TGE9S3PoFNLD7
ZjHfTt3BbS3TQayAt/4SboYQiHbmW1N6flLg19DwdUoEFjJGUHpoi0oNU4EqHmG2
bACw2Mwmnw5nJD6AOaRBYn0wz018wLZQinflj6XFpOO2bwQ9FPxcVuHV/dUKNypB
Rl6/j6C3Z2GASAedmk9PZ8n3o9bKnxeNsA88kCBP/aHzBxadpGOrt2i5hsbaKahq
IEZqhX7A5r9dR8XiyPa0grcWtTLDMBoCzL4N9iX/fMZsXiWqwCwXTS5i9SftbemC
NWbieWG69o0FlFeivNo+/zwqI2zjvUFJqWZmri1pJef9vCwq0Ffux5+tETDksshV
iDpgTcaavvxyEOt/4ukS8KAFD0Pj7Uf3XEBi1McJ2MEbtiQMEJVxCPtfz8ExYwWN
Qa/iC42uXBkdNFsgb2eWYO07WbO1kTU1xKxYwd7cJYsLHyW7n9h+jrn+Ws+mVQLi
vEFTjUiuYQEt/EF1+pQyLNE/r27BEGuiP2rAfaK3BNfZL2SFq9lUJJoMfI+hpfCd
Ata75b4Of5PQAvblw7a8xzVb1lUwFxP9wtIbcb7KJcnTd8PHD9lL47a8SxmVPqXV
ncYAWGJ2iXTBmNq9feptY8vumJgbulJsIXJMlbd2awv0Ybx1sJp8GUJjQcnMGEnt
kWK5U/68BRChk+xagHjlJPAehu6vVvvb9WzZ5DHv9ghayhTdygKmxkZt8d78ga9T
NFBF+4vRVvsuXUzHed4/F0cQUS0JXUp5vg4pstuPbd+ska/vkmpxbs4KZK0ymujL
7xJyfyH9MI5mZ/QIdNByM+huMj4HUWB8po7vw1pRVPcZdu7+mK31CuS98/FhBZ+A
3EuBAFBybWBf6lXjCBvPla8jAbRrLkdNt7im6gZMLk67q/Biwz3f9dC/YpPTj/KN
3uOJ5CONJJizRrlSbCJHksNBgvoljzC3WOmtP1JsSBrccaVlwURfFweKWWrdxK+r
/SyBHDUxB5ro1TgWfyXcICtIm1awjCXMX+nEnGU77UR+r/LcIMMpEBF/iwfz2QlO
bejF/fev9c6ToadUPo2V60zLx5M/moJ1EZB177eO04r9qTvvpp9uqp2E1qPM4zBE
3wXD6zp5gXuwYJ06aZsftClJH+M4JzuBhz9TeyJOvGJTv4J+pZ8hMIEK8qU7bEgz
jH9bphVG6dXggaZGBDprsEgQgmvN7Hl9nYUtSI3SHWxu1etA1mEn9HQ9rboRhYRq
UzO3seF2KkS9/VRL5EjEInbjX4jgckcRgtSvZ7JpUj/a9t49GsRALFCOb3PZe+9E
5w+HwMrQdV1bJ9uuYM68UsD6VYJeDdp5JdVCtx69kjGF+YSYdvUo1mFP+bw2YMNl
dAt3XjeotCOsa63Jw33rIG50WdpUhLvIeJj/HYQiYP0="

# Create extraction directory
EXTRACT_DIR="multi_sae_test_package"
mkdir -p "$EXTRACT_DIR"
cd "$EXTRACT_DIR"

print_status "Extracting package contents..."

# Decrypt and extract
if ! echo "$ENCRYPTED_DATA" | base64 -d |     openssl enc -aes-256-cbc -d -salt -pbkdf2         -pass "pass:$PASSWORD"         -out "package.tar.gz" 2>/dev/null; then
    print_error "Invalid password or corrupted package"
    rm -f "package.tar.gz"
    exit 1
fi

# Extract package contents
if ! tar -xzf package.tar.gz; then
    print_error "Failed to extract package contents"
    exit 1
fi

# Remove temporary archive
rm package.tar.gz

# Set proper permissions for .config directory and files
print_status "Setting file permissions..."
chmod 700 .config
chmod 600 .config/*.pem 2>/dev/null || true
chmod 644 .config/*.json 2>/dev/null || true
chmod 755 *.sh *.py 2>/dev/null || true

# Create virtual environment and install dependencies
print_status "Setting up Python virtual environment..."
if command -v python3 &> /dev/null; then
    python3 -m venv venv
    if [[ -f "requirements.txt" ]]; then
        print_status "Installing Python dependencies..."
        source venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt
        print_status "✅ Virtual environment created and dependencies installed"
    else
        print_warning "No requirements.txt found, skipping dependency installation"
    fi
else
    print_error "Python3 is required but not installed"
    exit 1
fi

print_status "Package extracted successfully!"
print_status "Directory: $EXTRACT_DIR"

echo ""
echo "Files installed:"
echo "Current directory:"
ls -la *.sh *.py *.md 2>/dev/null || echo "  (no files)"
echo ""
echo ".config directory:"
ls -la .config/

echo ""
echo "Next steps:"
echo "1. cd $EXTRACT_DIR"
echo "2. ./multi_sae_test.sh"
echo ""
echo "This will run the comprehensive multi-SAE test suite."
