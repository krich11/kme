#!/bin/bash
# Multi-SAE Test Package Self-Extractor
# ETSI QKD 014 V1.1.1 Multi-SAE Testing Package

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

print_header() {
    echo -e "${BLUE}================================${NC}"
    echo -e "${BLUE}  Multi-SAE Test Package${NC}"
    echo -e "${BLUE}  ETSI QKD 014 V1.1.1${NC}"
    echo -e "${BLUE}================================${NC}"
}

print_status() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_header

# Check for password
if [[ $# -eq 0 ]]; then
    read -s -p "Enter package password: " PASSWORD
    echo
else
    PASSWORD="$1"
fi

# Embedded encrypted data
ENCRYPTED_DATA="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"

# Create extraction directory
EXTRACT_DIR="multi_sae_test_package"
mkdir -p "$EXTRACT_DIR"
cd "$EXTRACT_DIR"

print_status "Extracting package contents..."

# Decrypt and extract
if ! echo "$ENCRYPTED_DATA" | base64 -d |     openssl enc -aes-256-cbc -d -salt -pbkdf2         -pass "pass:$PASSWORD"         -out "package.tar.gz" 2>/dev/null; then
    print_error "Invalid password or corrupted package"
    rm -f "package.tar.gz"
    exit 1
fi

# Extract package contents
if ! tar -xzf package.tar.gz; then
    print_error "Failed to extract package contents"
    exit 1
fi

# Remove temporary archive
rm package.tar.gz

# Set proper permissions for .config directory and files
print_status "Setting file permissions..."
chmod 700 .config
chmod 600 .config/*.pem 2>/dev/null || true
chmod 644 .config/*.json 2>/dev/null || true
chmod 755 *.sh *.py 2>/dev/null || true

# Create virtual environment and install dependencies
print_status "Setting up Python virtual environment..."
if command -v python3 &> /dev/null; then
    python3 -m venv venv
    if [[ -f "requirements.txt" ]]; then
        print_status "Installing Python dependencies..."
        source venv/bin/activate
        pip install --upgrade pip
        pip install -r requirements.txt
        print_status "✅ Virtual environment created and dependencies installed"
    else
        print_warning "No requirements.txt found, skipping dependency installation"
    fi
else
    print_error "Python3 is required but not installed"
    exit 1
fi

print_status "Package extracted successfully!"
print_status "Directory: $EXTRACT_DIR"

echo ""
echo "Files installed:"
echo "Current directory:"
ls -la *.sh *.py *.md 2>/dev/null || echo "  (no files)"
echo ""
echo ".config directory:"
ls -la .config/

echo ""
echo "Next steps:"
echo "1. cd $EXTRACT_DIR"
echo "2. ./multi_sae_test.sh"
echo ""
echo "This will run the comprehensive multi-SAE test suite."
